        -:    0:Source:m3.c
        -:    0:Graph:m3.gcno
        -:    0:Data:m3.gcda
        -:    0:Runs:37
        -:    0:Programs:1
        -:    1:/*  -*- Last-Edit:  Wed May 7 10:12:52 1993 by Monica; -*- */
        -:    2:
        -:    3:
        -:    4:#include <stdio.h>
        -:    5:
        -:    6:#include "processor.h"
        -:    7:/* A job descriptor. */
        -:    8:extern float getOperand(char * str);
        -:    9:
        -:   10:extern void getAdata(char * str,int *pos, char * s);
        -:   11:
        -:   12:#define NULL 0
        -:   13:
        -:   14:
        -:   15:#define NEW_JOB        1
        -:   16:#define UPGRADE_PRIO   2 
        -:   17:#define BLOCK          3
        -:   18:#define UNBLOCK        4  
        -:   19:#define QUANTUM_EXPIRE 5
        -:   20:#define FINISH         6
        -:   21:#define FLUSH          7
        -:   22:
        -:   23:#define MAXPRIO 3
        -:   24:
        -:   25:typedef struct _job {
        -:   26:    struct  _job *next, *prev; /* Next and Previous in job list. */
        -:   27:    int          val  ;         /* Id-value of program. */
        -:   28:    short        priority;     /* Its priority. */
        -:   29:} Ele, *Ele_Ptr;
        -:   30:
        -:   31:typedef struct list		/* doubly linked list */
        -:   32:{
        -:   33:  Ele *first;
        -:   34:  Ele *last;
        -:   35:  int    mem_count;		/* member count */
        -:   36:} List;
        -:   37:
        -:   38:/*-----------------------------------------------------------------------------
        -:   39:  new_ele
        -:   40:     alloates a new element with value as num.
        -:   41:-----------------------------------------------------------------------------*/
function new_ele called 44 returned 100% blocks executed 100%
       44:   42:Ele* new_ele(new_num) 
        -:   43:int new_num;
        -:   44:{	
        -:   45:    Ele *ele;
        -:   46:
       44:   47:    ele =(Ele *)malloc(sizeof(Ele));
       44:   48:    ele->next = NULL;
       44:   49:    ele->prev = NULL;
       44:   50:    ele->val  = new_num;
       44:   51:    return ele;
        -:   52:}
        -:   53:
        -:   54:/*-----------------------------------------------------------------------------
        -:   55:  new_list
        -:   56:        allocates, initializes and returns a new list.
        -:   57:        Note that if the argument compare() is provided, this list can be
        -:   58:            made into an ordered list. see insert_ele().
        -:   59:-----------------------------------------------------------------------------*/
function new_list called 116 returned 100% blocks executed 100%
      116:   60:List *new_list()
        -:   61:{
        -:   62:    List *list;
        -:   63:
      116:   64:    list = (List *)malloc(sizeof(List));
        -:   65:    
      116:   66:    list->first = NULL;
      116:   67:    list->last  = NULL;
      116:   68:    list->mem_count = 0;
      116:   69:    return (list);
        -:   70:}
        -:   71:
        -:   72:/*-----------------------------------------------------------------------------
        -:   73:  append_ele
        -:   74:        appends the new_ele to the list. If list is null, a new
        -:   75:	list is created. The modified list is returned.
        -:   76:-----------------------------------------------------------------------------*/
function append_ele called 54 returned 100% blocks executed 100%
       54:   77:List *append_ele(a_list, a_ele)
        -:   78:List *a_list;
        -:   79:Ele  *a_ele;
        -:   80:{
       54:   81:  if (!a_list)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        5:   82:      a_list = new_list();	/* make list without compare function */
call    0 returned 100%
        -:   83:
       54:   84:  a_ele->prev = a_list->last;	/* insert at the tail */
       54:   85:  if (a_list->last)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        9:   86:    a_list->last->next = a_ele;
        -:   87:  else
       45:   88:    a_list->first = a_ele;
       54:   89:  a_list->last = a_ele;
       54:   90:  a_ele->next = NULL;
       54:   91:  a_list->mem_count++;
       54:   92:  return (a_list);
        -:   93:}
        -:   94:
        -:   95:/*-----------------------------------------------------------------------------
        -:   96:  find_nth
        -:   97:        fetches the nth element of the list (count starts at 1)
        -:   98:-----------------------------------------------------------------------------*/
function find_nth called 6 returned 100% blocks executed 88%
        6:   99:Ele *find_nth(f_list, n)
        -:  100:List *f_list;
        -:  101:int   n;
        -:  102:{
        -:  103:    Ele *f_ele;
        -:  104:    int i;
        -:  105:
        6:  106:    if (!f_list)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  107:	return NULL;
        6:  108:    f_ele = f_list->first;
       11:  109:    for (i=1; f_ele && (i<n); i++)
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
branch  2 taken 83%
branch  3 taken 17% (fallthrough)
        5:  110:	f_ele = f_ele->next;
        6:  111:    return f_ele;
        -:  112:}
        -:  113:
        -:  114:/*-----------------------------------------------------------------------------
        -:  115:  del_ele
        -:  116:        deletes the old_ele from the list.
        -:  117:        Note: even if list becomes empty after deletion, the list
        -:  118:	      node is not deallocated.
        -:  119:-----------------------------------------------------------------------------*/
function del_ele called 37 returned 100% blocks executed 82%
       37:  120:List *del_ele(d_list, d_ele)
        -:  121:List *d_list;
        -:  122:Ele  *d_ele;
        -:  123:{
       37:  124:    if (!d_list || !d_ele)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  125:	return (NULL);
        -:  126:    
       37:  127:    if (d_ele->next)
branch  0 taken 19% (fallthrough)
branch  1 taken 81%
        7:  128:	d_ele->next->prev = d_ele->prev;
        -:  129:    else
       30:  130:	d_list->last = d_ele->prev;
       37:  131:    if (d_ele->prev)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  132:	d_ele->prev->next = d_ele->next;
        -:  133:    else
       37:  134:	d_list->first = d_ele->next;
        -:  135:    /* KEEP d_ele's data & pointers intact!! */
       37:  136:    d_list->mem_count--;
       37:  137:    return (d_list);
        -:  138:}
        -:  139:
        -:  140:/*-----------------------------------------------------------------------------
        -:  141:   free_ele
        -:  142:       deallocate the ptr. Caution: The ptr should point to an object
        -:  143:       allocated in a single call to malloc.
        -:  144:-----------------------------------------------------------------------------*/
function free_ele called 27 returned 100% blocks executed 100%
       27:  145:void free_ele(ptr)
        -:  146:Ele *ptr;
        -:  147:{
       27:  148:    free(ptr);
       27:  149:}
        -:  150:
        -:  151:int alloc_proc_num;
        -:  152:int num_processes;
        -:  153:Ele* cur_proc;
        -:  154:List *prio_queue[MAXPRIO+1]; 	/* 0th element unused */
        -:  155:List *block_queue;
        -:  156:
        -:  157:void
function finish_process called 50 returned 100% blocks executed 100%
       50:  158:finish_process(char *r,int *OL)
        -:  159:{
       50:  160:    schedule();
call    0 returned 100%
       50:  161:    char s[10]="";
       50:  162:    if (cur_proc)
branch  0 taken 54% (fallthrough)
branch  1 taken 46%
        -:  163:    {
       27:  164:snprintf(s,10,"%d",cur_proc->val);
       27:  165:        strcat(r,s);
       27:  166:        strcat(r," ");
       27:  167:	free_ele(cur_proc);
call    0 returned 100%
       27:  168:	num_processes--;
        -:  169:    }
       50:  170:}
        -:  171:
        -:  172:void
function finish_all_processes called 6 returned 100% blocks executed 100%
        6:  173:finish_all_processes(char *r,int *OL)
        -:  174:{
        -:  175:    int i;
        -:  176:    int total;
        6:  177:    total = num_processes;
       12:  178:    for (i=0; i<total; i++)
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        6:  179:	finish_process(r,OL);
call    0 returned 100%
        6:  180:}
        -:  181:
function schedule called 61 returned 100% blocks executed 100%
       61:  182:schedule()
        -:  183:{
        -:  184:    int i;
        -:  185:    
       61:  186:    cur_proc = NULL;
      164:  187:    for (i=MAXPRIO; i > 0; i--)
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
        -:  188:    {
      139:  189:	if (prio_queue[i]->mem_count > 0)
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
        -:  190:	{
       36:  191:	    cur_proc = prio_queue[i]->first;
       36:  192:	    prio_queue[i] = del_ele(prio_queue[i], cur_proc);
call    0 returned 100%
       36:  193:	    return;
        -:  194:	}
        -:  195:    }
        -:  196:}
        -:  197:
        -:  198:void
function upgrade_process_prio called 6 returned 100% blocks executed 100%
        6:  199:upgrade_process_prio(prio, ratio)
        -:  200:int prio;
        -:  201:float ratio;
        -:  202:{
        -:  203:    int count;
        -:  204:    int n;
        -:  205:    Ele *proc;
        -:  206:    List *src_queue, *dest_queue;
        -:  207:    
        6:  208:    if (prio >= MAXPRIO)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        1:  209:	return;
        5:  210:    src_queue = prio_queue[prio];
        5:  211:    dest_queue = prio_queue[prio+1];
        5:  212:    count = src_queue->mem_count;
        -:  213:
        5:  214:    if (count > 0)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -:  215:    {
        3:  216:	n = (int) (count*ratio + 1.1); /* constant mutation */
        3:  217:	proc = find_nth(src_queue, n);
call    0 returned 100%
        3:  218:	if (proc) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:  219:	    src_queue = del_ele(src_queue, proc);
call    0 returned 100%
        -:  220:	    /* append to appropriate prio queue */
        1:  221:	    proc->priority = prio;
        1:  222:	    dest_queue = append_ele(dest_queue, proc);
call    0 returned 100%
        -:  223:	}
        -:  224:    }
        -:  225:}
        -:  226:
        -:  227:void
function unblock_process called 5 returned 100% blocks executed 57%
        5:  228:unblock_process(ratio)
        -:  229:float ratio;
        -:  230:{
        -:  231:    int count;
        -:  232:    int n;
        -:  233:    Ele *proc;
        -:  234:    int prio;
        5:  235:    if (block_queue)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -:  236:    {
        3:  237:	count = block_queue->mem_count;
        3:  238:	n = (int) (count*ratio + 1);
        3:  239:	proc = find_nth(block_queue, n);
call    0 returned 100%
        3:  240:	if (proc) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  241:	    block_queue = del_ele(block_queue, proc);
call    0 never executed
        -:  242:	    /* append to appropriate prio queue */
    #####:  243:	    prio = proc->priority;
    #####:  244:	    prio_queue[prio] = append_ele(prio_queue[prio], proc);
call    0 never executed
        -:  245:	}
        -:  246:    }
        5:  247:}
        -:  248:
function quantum_expire called 4 returned 100% blocks executed 100%
        4:  249:void quantum_expire()
        -:  250:{
        -:  251:    int prio;
        4:  252:    schedule();
call    0 returned 100%
        4:  253:    if (cur_proc)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -:  254:    {
        3:  255:	prio = cur_proc->priority;
        3:  256:	prio_queue[prio] = append_ele(prio_queue[prio], cur_proc);
call    0 returned 100%
        -:  257:    }	
        4:  258:}
        -:  259:	
        -:  260:void
function block_process called 7 returned 100% blocks executed 100%
        7:  261:block_process()
        -:  262:{
        7:  263:    schedule();
call    0 returned 100%
        7:  264:    if (cur_proc)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -:  265:    {
        6:  266:	block_queue = append_ele(block_queue, cur_proc);
call    0 returned 100%
        -:  267:    }
        7:  268:}
        -:  269:
function new_process called 44 returned 100% blocks executed 100%
       44:  270:Ele * new_process(prio)
        -:  271:int prio;
        -:  272:{
        -:  273:    Ele *proc;
       44:  274:    proc = new_ele(alloc_proc_num++);
call    0 returned 100%
       44:  275:    proc->priority = prio;
       44:  276:    num_processes++;
       44:  277:    return proc;
        -:  278:}
        -:  279:
function add_process called 5 returned 100% blocks executed 100%
        5:  280:void add_process(prio)
        -:  281:int prio;
        -:  282:{
        -:  283:    Ele *proc;
        5:  284:    proc = new_process(prio);
call    0 returned 100%
        5:  285:    prio_queue[prio] = append_ele(prio_queue[prio], proc);
call    0 returned 100%
        5:  286:}
        -:  287:
function init_prio_queue called 111 returned 100% blocks executed 100%
      111:  288:void init_prio_queue(prio, num_proc)
        -:  289:int prio;
        -:  290:int num_proc;
        -:  291:{
        -:  292:    List *queue;
        -:  293:    Ele  *proc;
        -:  294:    int i;
        -:  295:    
      111:  296:    queue = new_list();
call    0 returned 100%
      150:  297:    for (i=0; i<num_proc; i++)
branch  0 taken 26%
branch  1 taken 74% (fallthrough)
        -:  298:    {
       39:  299:	proc = new_process(prio);
call    0 returned 100%
       39:  300:	queue = append_ele(queue, proc);
call    0 returned 100%
        -:  301:    }
      111:  302:    prio_queue[prio] = queue;
      111:  303:}
        -:  304:
function initialize called 37 returned 100% blocks executed 100%
       37:  305:void initialize()
        -:  306:{
       37:  307:    alloc_proc_num = 0;
       37:  308:    num_processes = 0;
       37:  309:}
        -:  310:				
        -:  311:/* test driver */
        -:  312:		
        -:  313:/* test driver */
function mainQ called 37 returned 100% blocks executed 94%
       37:  314:char *mainQ(char *argv)
        -:  315:{
        -:  316:    int command;
        -:  317:    int prio;
        -:  318:    float ratio;
        -:  319:    int status;
       37:  320:    float intF=1.0;
        -:  321:    static char r[2000]=""; 
       37:  322:    r[0]='\0';
       37:  323:    int OL=0;
       37:  324:    int pos=0;
        -:  325:    int x;
       37:  326:    char value[10]="";
        -:  327:    int a1,a2,a3;
       37:  328:    initialize();
call    0 returned 100%
        -:  329:    
       37:  330:    getAdata(argv,&pos,value);
call    0 returned 100%
       37:  331:    a1=atoi(value);
call    0 returned 100%
       37:  332:    getAdata(argv,&pos,value);
call    0 returned 100%
       37:  333:    a2=atoi(value);
call    0 returned 100%
       37:  334:    getAdata(argv,&pos,value);
call    0 returned 100%
       37:  335:    a3=atoi(value);
call    0 returned 100%
        -:  336:  
       37:  337:	init_prio_queue(3, a3);
call    0 returned 100%
       37:  338:	init_prio_queue(2, a2);
call    0 returned 100%
       37:  339:	init_prio_queue(1, a1);
call    0 returned 100%
        -:  340:
      201:  341:    while(argv[pos]!='\0')
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
        -:  342:    {
      127:  343:        getAdata(argv,&pos,value);
call    0 returned 100%
      127:  344:        command=atoi(value);
call    0 returned 100%
      127:  345:	switch(command)
branch  0 taken 35%
branch  1 taken 6%
branch  2 taken 3%
branch  3 taken 6%
branch  4 taken 5%
branch  5 taken 4%
branch  6 taken 5%
branch  7 taken 38%
        -:  346:	{
        -:  347:	case FINISH:
       44:  348:	    finish_process(r,&OL);
call    0 returned 100%
       44:  349:	    break;
        -:  350:	case BLOCK:
        7:  351:	    block_process();
call    0 returned 100%
        7:  352:	    break;
        -:  353:	case QUANTUM_EXPIRE:
        4:  354:	    quantum_expire();
call    0 returned 100%
        4:  355:	    break;
        -:  356:	case UNBLOCK:
        7:  357:            if(argv[pos]!='\0'){
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        5:  358:            getAdata(argv,&pos,value);
call    0 returned 100%
        5:  359:            ratio=(float)(getOperand(value));
call    0 returned 100%
        5:  360:	    unblock_process(ratio);}
call    0 returned 100%
        7:  361:	    break;
        -:  362:	case UPGRADE_PRIO:
        6:  363:            if(argv[pos]!='\0'){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        6:  364:            getAdata(argv,&pos,value);
call    0 returned 100%
        6:  365:	    prio=atoi(value);
call    0 returned 100%
        -:  366:            }
        -:  367:            
        6:  368:            if(argv[pos]!='\0'){
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
        5:  369:            getAdata(argv,&pos,value);
call    0 returned 100%
        5:  370:            ratio=(float)(getOperand(value));
call    0 returned 100%
        -:  371:            }
        6:  372:	    if (prio > MAXPRIO || prio <= 0) { 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  373:		//fprintf(stdout, "** invalid priority\n");
    #####:  374:                strcat(r,"** invalid priority\n");
    #####:  375:		return;
        -:  376:	    }
        -:  377:	    else 
        6:  378:		upgrade_process_prio(prio, ratio);
call    0 returned 100%
        6:  379:	    break;
        -:  380:	case NEW_JOB:
        5:  381:            if(argv[pos]!='\0'){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5:  382:            getAdata(argv,&pos,value);
call    0 returned 100%
        5:  383:            prio=atoi(value);
call    0 returned 100%
        -:  384:            }
        5:  385:	    if (prio > MAXPRIO || prio <= 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  386:		//fprintf(stdout, "** invalid priority\n");
    #####:  387:                strcat(r,"** invalid priority\n");
    #####:  388:		return;
        -:  389:	    }
        -:  390:	    else 
        5:  391:		add_process(prio);
call    0 returned 100%
        5:  392:	    break;
        -:  393:	case FLUSH:
        6:  394:	    finish_all_processes(r,&OL);
call    0 returned 100%
        -:  395:	    break;
        -:  396:	}
        -:  397:    }
       37:  398:   return r;
        -:  399:}
function main called 37 returned 100% blocks executed 100%
       37:  400:main(argc, argv)
        -:  401:int argc;
        -:  402:char *argv[];
        -:  403:{
       37:  404:      fprintf(stdout,"%s",mainQ(argv[1]));
call    0 returned 100%
call    1 returned 100%
       37:  405:}
