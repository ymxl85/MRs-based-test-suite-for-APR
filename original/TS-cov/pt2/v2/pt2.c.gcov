        -:    0:Source:pt2.c
        -:    0:Graph:pt2.gcno
        -:    0:Data:pt2.gcda
        -:    0:Runs:32
        -:    0:Programs:1
        -:    1:/***********************************************/
        -:    2:/*  assgnment.5  Shu Z. A00042813 for CS453    */
        -:    3:/*  using the tokenizer and stream module      */
        -:    4:/*  print_tokens.c Code                        */
        -:    5:/***********************************************/
        -:    6:
        -:    7:/***********************************************/
        -:    8:/* NAME:	print_tokens                   */
        -:    9:/* INPUT:	a filename                     */
        -:   10:/* OUTPUT:      print out the token stream     */
        -:   11:/* DESCRIPTION: using the tokenizer interface  */
        -:   12:/*              to print out the token stream  */
        -:   13:/***********************************************/
        -:   14:#include <stdio.h>
        -:   15:#include <ctype.h>
        -:   16:#include <string.h>
        -:   17:#include "tokens.h"
        -:   18:#define TRUE 1
        -:   19:#define FALSE 0
        -:   20:#define EOF '\0'
        -:   21:
        -:   22:
        -:   23:/* stream.c code */
        -:   24:
        -:   25:/***********************************************/
        -:   26:/* NMAE:	open_character_stream          */
        -:   27:/* INPUT:       a filename                     */
        -:   28:/* OUTPUT:      a pointer to chacracter_stream */
        -:   29:/* DESCRIPTION: when not given a filename,     */
        -:   30:/*              open stdin,otherwise open      */
        -:   31:/*              the existed file               */
        -:   32:/***********************************************/
function open_character_stream called 32 returned 100% blocks executed 100%
       32:   33:character_stream open_character_stream(fname)
        -:   34:char *fname;
       32:   35:{ character_stream fp=fname;
       32:   36:   return(fp);
        -:   37:}
        -:   38:
        -:   39:/**********************************************/
        -:   40:/* NAME:	get_char                      */
        -:   41:/* INPUT:       a pointer to char_stream      */
        -:   42:/* OUTPUT:      a character                   */
        -:   43:/**********************************************/
function get_char called 160 returned 100% blocks executed 100%
      160:   44:char get_char(fp)
        -:   45:character_stream *fp;
      160:   46:{ char ch=*(*fp);
        -:   47:  //ch=getc(fp);
      160:   48:  if(ch!='\0')
branch  0 taken 63% (fallthrough)
branch  1 taken 38%
      100:   49:   (*fp)++;
      160:   50:  return(ch);
        -:   51:}
        -:   52:
        -:   53:/***************************************************/
        -:   54:/* NAME:      unget_char                           */
        -:   55:/* INPUT:     a pointer to char_stream,a character */
        -:   56:/* OUTPUT:    a character                          */
        -:   57:/* DESCRIPTION:when unable to put back,return EOF  */
        -:   58:/***************************************************/
function unget_char called 29 returned 100% blocks executed 100%
       29:   59:char unget_char(ch,fp)
        -:   60:character_stream *fp;
        -:   61:char ch;
       29:   62:{ char c=ch;
        -:   63:  //c=ungetc(ch,fp);
        -:   64:  //*(*fp)=c;
       29:   65:  if(ch!='\0')
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        1:   66:   (*fp)--;
        -:   67:
       29:   68:  if(c ==EOF)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
        -:   69:    {
       28:   70:     return(c);
        -:   71:    }
        -:   72:  else
        1:   73:     return(c);
        -:   74:}
        -:   75:
        -:   76:/* tokenizer.c code */
        -:   77:
        -:   78:
        -:   79:char buffer[81];  /* fixed array length MONI */ /* to store the token temporar */
        -:   80:
        -:   81:
        -:   82:static int is_spec_symbol();
        -:   83:static int is_token_end();
        -:   84:static unget_error();
        -:   85:static int is_keyword();
        -:   86:static int is_identifier();
        -:   87:static int is_num_constant();
        -:   88:static int is_char_constant();
        -:   89:static int is_str_constant();
        -:   90:static int is_comment();
        -:   91:static void print_spec_symbol();
        -:   92:
        -:   93:/********************************************************/
        -:   94:/* NAME:	open_token_stream                       */
        -:   95:/* INPUT:       a filename                              */
        -:   96:/* OUTPUT:      a pointer to a token_stream             */
        -:   97:/* DESCRIPTION: when filename is EMPTY,choice standard  */
        -:   98:/*              input device as input source            */
        -:   99:/********************************************************/
function open_token_stream called 32 returned 100% blocks executed 67%
       32:  100:token_stream open_token_stream(fname)
        -:  101:char *fname;
        -:  102:{
        -:  103: token_stream fp;
       32:  104: if(strcmp(fname,"")==0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  105:    fp=open_character_stream(NULL);
call    0 never executed
        -:  106: else
       32:  107:    fp=open_character_stream(fname);
call    0 returned 100%
       32:  108: return(fp);
        -:  109:}
        -:  110:
        -:  111:/********************************************************/
        -:  112:/* NAME :	get_token                               */
        -:  113:/* INPUT: 	a pointer to the tokens_stream          */
        -:  114:/* OUTPUT:      a token                                 */
        -:  115:/* DESCRIPTION: according the syntax of tokens,dealing  */
        -:  116:/*              with different case  and get one token  */
        -:  117:/********************************************************/
function get_token called 70 returned 100% blocks executed 83%
       70:  118:token get_token(tp)
        -:  119:token_stream *tp;
        -:  120:{ 
       70:  121:  int i=0,j;
       70:  122:  int id=0;
        -:  123:  char ch,ch1[2];
     5740:  124:  for (j=0;j<=80;j++)          /* initial the buffer   */
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     5670:  125:      { buffer[j]='\0';} 
       70:  126:   ch1[0]='\0';
       70:  127:   ch1[1]='\0';
       70:  128:   ch=get_char(tp);
call    0 returned 100%
      140:  129:   while(ch==' '||ch=='\n')      /* strip all blanks until meet characters */
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
        -:  130:      {
    #####:  131:       ch=get_char(tp);
call    0 never executed
        -:  132:      } 
       70:  133:   buffer[i]=ch;
        -:  134:
       70:  135:   if(is_eof_token(buffer)==TRUE){return(buffer);}
call    0 returned 100%
branch  1 taken 46% (fallthrough)
branch  2 taken 54%
       38:  136:   if(is_spec_symbol(buffer)==TRUE)return(buffer); 
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
       38:  137:   if(ch =='"')id=1;    /* prepare for string */
branch  0 taken 39% (fallthrough)
branch  1 taken 61%
       38:  138:   if(ch ==59)id=2;    /* prepare for comment */
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
       38:  139:   ch=get_char(tp);
call    0 returned 100%
        -:  140:
      128:  141:   while (is_token_end(id,ch) == FALSE)/* until meet the end character */
call    0 returned 100%
branch  1 taken 58%
branch  2 taken 42% (fallthrough)
        -:  142:   {
       52:  143:       i++;
       52:  144:       buffer[i]=ch;
       52:  145:       ch=get_char(tp);
call    0 returned 100%
        -:  146:   }
        -:  147:
       38:  148:   ch1[0]=ch;                        /* hold the end charcater          */
       38:  149:   if(is_eof_token(ch1)==TRUE)       /* if end character is eof token    */
call    0 returned 100%
branch  1 taken 74% (fallthrough)
branch  2 taken 26%
        -:  150:      { 
       28:  151:        ch=unget_char(ch,tp);        /* then put back eof on token_stream */
call    0 returned 100%
       28:  152:        if(ch==EOF)unget_error(*tp);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
       28:  153:        return(buffer);
        -:  154:      }
       10:  155:   if(is_spec_symbol(ch1)==TRUE)     /* if end character is special_symbol */
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  156:      { ch=unget_char(ch,tp);        /* then put back this character       */
call    0 never executed
    #####:  157:        if(ch==EOF)unget_error(*tp);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  158:        return(buffer);
        -:  159:      }
       10:  160:   if(id==1)                  /* if end character is " and is string */
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
        9:  161:     { i++;                     /* case,hold the second " in buffer    */
        9:  162:       buffer[i]=ch;
        9:  163:       return(buffer); 
        -:  164:     }
        1:  165:   if(id==0 && ch==59)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  166:                                   /* when not in string or comment,meet ";" */
        1:  167:     { ch=unget_char(ch,tp);       /* then put back this character         */
call    0 returned 100%
        -:  168:      // if(ch==EOF)
        1:  169:       unget_error(*tp);
call    0 returned 100%
        1:  170:       return(buffer); 
        -:  171:     }
    #####:  172:  return(buffer);                   /* return nomal case token             */
        -:  173:}
        -:  174:
        -:  175:/*******************************************************/
        -:  176:/* NAME:	is_token_end                           */
        -:  177:/* INPUT:       a character,a token status             */
        -:  178:/* OUTPUT:	a BOOLEAN value                        */
        -:  179:/*******************************************************/
function is_token_end called 90 returned 100% blocks executed 90%
       90:  180:static int is_token_end(str_com_id,ch)
        -:  181:char ch;
        -:  182:int str_com_id;
        -:  183:{ char ch1[2];  /* fixed array declaration MONI */
       90:  184: ch1[0]=ch;
       90:  185: ch1[1]='\0';
       90:  186: if(is_eof_token(ch1)==TRUE){return(TRUE);} /* is eof token? */
call    0 returned 100%
branch  1 taken 31% (fallthrough)
branch  2 taken 69%
       62:  187: if(str_com_id==1)          /* is string token */
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
       28:  188:    { if(ch=='"' | ch=='\n')   /* for string until meet another " */
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
        9:  189:         return(TRUE);
        -:  190:      else
       19:  191:         return(FALSE);
        -:  192:    }
        -:  193:
       34:  194: if(str_com_id==2)    /* is comment token */
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
       15:  195:   { if(ch=='\n')     /* for comment until meet end of line */
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  196:        return(TRUE);
        -:  197:      else
       15:  198:        return(FALSE);
        -:  199:   }
        -:  200:
       19:  201: if(is_spec_symbol(ch1)==TRUE) return(TRUE); /* is special_symbol? */
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
       19:  202: if(ch ==' ' || ch=='\n' || ch==59) return(TRUE); 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 5% (fallthrough)
branch  5 taken 95%
        -:  203:                              /* others until meet blank or tab or 59 */
       18:  204: return(FALSE);               /* other case,return FALSE */
        -:  205:}
        -:  206:
        -:  207:/****************************************************/
        -:  208:/* NAME :	token_type                          */
        -:  209:/* INPUT:       a pointer to the token              */
        -:  210:/* OUTPUT:      an integer value                    */
        -:  211:/* DESCRIPTION: the integer value is corresponding  */
        -:  212:/*              to the different token type         */
        -:  213:/****************************************************/
function token_type called 70 returned 100% blocks executed 92%
       70:  214:static int token_type(tok)
        -:  215:token tok;
        -:  216:{ 
       70:  217: if(is_keyword(tok))return(keyword);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
       70:  218: if(is_spec_symbol(tok))return(spec_symbol);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
       70:  219: if(is_identifier(tok))return(identifier);
call    0 returned 100%
branch  1 taken 6% (fallthrough)
branch  2 taken 94%
       66:  220: if(is_num_constant(tok))return(num_constant);
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
       63:  221: if(is_str_constant(tok))return(str_constant);
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
       54:  222: if(is_char_constant(tok))return(char_constant);
call    0 returned 100%
branch  1 taken 6% (fallthrough)
branch  2 taken 94%
       51:  223: if(is_comment(tok))return(comment);
call    0 returned 100%
branch  1 taken 12% (fallthrough)
branch  2 taken 88%
       45:  224: if(is_eof_token(tok))return(end);
call    0 returned 100%
branch  1 taken 71% (fallthrough)
branch  2 taken 29%
       13:  225: return(error);                    /* else look as error token */
        -:  226:}
        -:  227:
        -:  228:/****************************************************/
        -:  229:/* NAME:	print_token                         */
        -:  230:/* INPUT:	a pointer to the token              */
        -:  231:/* OUTPUT:      a BOOLEAN value,print out the token */
        -:  232:/*              according the forms required        */
        -:  233:/****************************************************/
function print_token called 70 returned 100% blocks executed 89%
       70:  234:int print_token(tok,r)
        -:  235:token tok;
        -:  236:char * r;
        -:  237:{ int type;
       70:  238:  type=token_type(tok);
call    0 returned 100%
       70:  239: if(type==error)
branch  0 taken 19% (fallthrough)
branch  1 taken 81%
        -:  240:   { //fprintf(stdout, "error,\"%s\".\n",tok);
       13:  241:     strcat(r,"error,\"");
       13:  242:     strcat(r,tok);
       13:  243:     strcat(r,"\".\n");
        -:  244:   } 
       70:  245: if(type==keyword)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  246:   {//fprintf(stdout, "keyword,\"%s\".\n",tok);
    #####:  247:     strcat(r,"keyword,\"");
    #####:  248:     strcat(r,tok);
    #####:  249:     strcat(r,"\".\n");
        -:  250:   }
       70:  251: if(type==spec_symbol)print_spec_symbol(tok,r);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       70:  252: if(type==identifier)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  253:   {//fprintf(stdout, "identifier,\"%s\".\n",tok);
        4:  254:    strcat(r,"identifier,\"");
        4:  255:     strcat(r,tok);
        4:  256:     strcat(r,"\".\n");
        -:  257:   }
       70:  258: if(type==num_constant)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  259:   {//fprintf(stdout, "numeric,%s.\n",tok);
        3:  260:    strcat(r,"numeric,");
        3:  261:     strcat(r,tok);
        3:  262:     strcat(r,".\n");
        -:  263:   }
       70:  264: if(type==str_constant)
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
        -:  265:   {//fprintf(stdout, "string,%s.\n",tok);
        9:  266:    strcat(r,"string,");
        9:  267:     strcat(r,tok);
        9:  268:     strcat(r,".\n");
        -:  269:   }
       70:  270: if(type==char_constant)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        3:  271:   {tok=tok+1;
        -:  272:    //fprintf(stdout, "character,\"%s\".\n",tok);
        3:  273:    strcat(r,"character,\"");
        3:  274:     strcat(r,tok);
        3:  275:     strcat(r,"\".\n");
        -:  276:   }
       70:  277: if(type==end) 
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
        -:  278:   //fprintf(stdout, "eof.\n");
       32:  279:   strcat(r,"eof.\n");
       70:  280:   }
        -:  281:
        -:  282:/* the code for tokens judgment function */
        -:  283:
        -:  284:/*************************************/
        -:  285:/* NAME:	is_eof_token         */
        -:  286:/* INPUT: 	a pointer to a token */
        -:  287:/* OUTPUT:      a BOOLEAN value      */
        -:  288:/*************************************/
function is_eof_token called 313 returned 100% blocks executed 100%
      313:  289:int is_eof_token(tok)
        -:  290:token tok;
        -:  291:{ 
      313:  292:  if( *tok==EOF)
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
      152:  293:      return(TRUE);
        -:  294:  else
      161:  295:      return(FALSE);
        -:  296:}
        -:  297:
        -:  298:/*************************************/
        -:  299:/* NAME:	is_comment           */
        -:  300:/* INPUT: 	a pointer to a token */
        -:  301:/* OUTPUT:      a BOOLEAN value      */
        -:  302:/*************************************/
function is_comment called 51 returned 100% blocks executed 100%
       51:  303:static int is_comment(ident)
        -:  304:token ident;
        -:  305:{
       51:  306:  if( (*ident) ==59 )   /* the char is 59   */
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        6:  307:     return(TRUE);
        -:  308:  else
       45:  309:     return(FALSE);
        -:  310:}
        -:  311:
        -:  312:/*************************************/
        -:  313:/* NAME:	is_keyword           */
        -:  314:/* INPUT: 	a pointer to a token */
        -:  315:/* OUTPUT:      a BOOLEAN value      */
        -:  316:/*************************************/
function is_keyword called 70 returned 100% blocks executed 89%
       70:  317:static int is_keyword(str)
        -:  318:    token  str;
        -:  319:{ 
      280:  320: if (!strcmp(str,"and") || !strcmp(str,"or") || !strcmp(str,"if") ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
      210:  321:    !strcmp(str,"xor")||!strcmp(str,"lambda")||!strcmp(str,"=>"))
    #####:  322:      return(TRUE);
        -:  323:  else 
       70:  324:      return(FALSE);
        -:  325:}
        -:  326:
        -:  327:/*************************************/
        -:  328:/* NAME:	is_char_constant     */
        -:  329:/* INPUT: 	a pointer to a token */
        -:  330:/* OUTPUT:      a BOOLEAN value      */
        -:  331:/*************************************/
function is_char_constant called 54 returned 100% blocks executed 100%
       54:  332:static int is_char_constant(str)
        -:  333:    token str;
        -:  334:{
       54:  335:  if ((*str)=='#' && isalpha(*(str+1)))
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
call    2 returned 100%
branch  3 taken 43% (fallthrough)
branch  4 taken 57%
        3:  336:     return(TRUE);
        -:  337:  else  
       51:  338:     return(FALSE);
        -:  339:}
        -:  340:
        -:  341:/*************************************/
        -:  342:/* NAME:	is_num_constant      */
        -:  343:/* INPUT: 	a pointer to a token */
        -:  344:/* OUTPUT:      a BOOLEAN value      */
        -:  345:/*************************************/
function is_num_constant called 66 returned 100% blocks executed 91%
       66:  346:static int is_num_constant(str)
        -:  347:    token  str;
        -:  348:{
       66:  349:  int i=1;
        -:  350:  
       66:  351:  if ( isdigit(*str)) 
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
        -:  352:    {
        7:  353:    while ( *(str+i) != '\0' )   /* until meet token end sign */
branch  0 taken 25%
branch  1 taken 75% (fallthrough)
        -:  354:      {
        1:  355:       if(isdigit(*(str+i)))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:  356:         i++;
        -:  357:       else
    #####:  358:         return(FALSE);
        -:  359:      }                         /* end WHILE */
        3:  360:    return(TRUE);
        -:  361:    }
        -:  362:  else
       63:  363:   return(FALSE);               /* other return FALSE */
        -:  364:}
        -:  365:
        -:  366:/*************************************/
        -:  367:/* NAME:	is_str_constant      */
        -:  368:/* INPUT: 	a pointer to a token */
        -:  369:/* OUTPUT:      a BOOLEAN value      */
        -:  370:/*************************************/
function is_str_constant called 63 returned 100% blocks executed 100%
       63:  371:static int is_str_constant(str)
        -:  372:    token str;
        -:  373:{
       63:  374:  int i=1;
        -:  375: 
       63:  376:  if ( *str =='"')
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
       49:  377:     { while (*(str+i)!='\0')  /* until meet the token end sign */
branch  0 taken 82%
branch  1 taken 18% (fallthrough)
       28:  378:         { if(*(str+i)=='"')
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
        9:  379:             return(TRUE);        /* meet the second '"'           */
        -:  380:           else
       19:  381:           i++;
        -:  382:         }               /* end WHILE */
        6:  383:     return(FALSE);
        -:  384:    }
        -:  385:  else
       48:  386:    return(FALSE);       /* other return FALSE */
        -:  387:}
        -:  388:/*************************************/
        -:  389:/* NAME:	is_identifier         */
        -:  390:/* INPUT: 	a pointer to a token */
        -:  391:/* OUTPUT:      a BOOLEAN value      */
        -:  392:/*************************************/
function is_identifier called 70 returned 100% blocks executed 100%
       70:  393:static int is_identifier(str)
        -:  394:    token  str;
        -:  395:{
       70:  396:  int i=1;
        -:  397:
       70:  398:  if ( isalpha( *str) ) 
call    0 returned 100%
branch  1 taken 7% (fallthrough)
branch  2 taken 93%
        -:  399:     {
       12:  400:        while(  *(str+i) !='\0' )   /* unti meet the end token sign */
branch  0 taken 43%
branch  1 taken 57% (fallthrough)
        -:  401:           { 
        5:  402:            if(isalpha(*(str+i)) || isdigit(*(str+i)))   
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
call    3 returned 100%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
        2:  403:               i++;
        -:  404:            else
        1:  405:               return(FALSE);
        -:  406:           }      /* end WHILE */
        4:  407:     return(TRUE);
        -:  408:     }
        -:  409:  else
       65:  410:     return(FALSE);
        -:  411:}
        -:  412:
        -:  413:/******************************************/
        -:  414:/* NAME:	unget_error               */
        -:  415:/* INPUT:       a pointer to token stream */
        -:  416:/* OUTPUT: 	print error message       */
        -:  417:/******************************************/
function unget_error called 29 returned 100% blocks executed 100%
       29:  418:static unget_error(fp)
        -:  419:character_stream *fp;
        -:  420:{
        -:  421://fprintf(stdout,"It can not get charcter\n");
       29:  422:}
        -:  423:
        -:  424:/*************************************************/
        -:  425:/* NAME:        print_spec_symbol                */
        -:  426:/* INPUT:       a pointer to a spec_symbol token */
        -:  427:/* OUTPUT :     print out the spec_symbol token  */
        -:  428:/*              according to the form required   */
        -:  429:/*************************************************/
function print_spec_symbol called 0 returned 0% blocks executed 0%
    #####:  430:static void print_spec_symbol(str,r)
        -:  431:token str;
        -:  432:char *r;
        -:  433:{
    #####:  434:    if      (!strcmp(str,"("))
branch  0 never executed
branch  1 never executed
        -:  435:    {
        -:  436:             //fprintf(stdout, "%s\n","lparen.");
    #####:  437:             strcat(r,"lparen.\n");
    #####:  438:             return;
        -:  439:    } 
    #####:  440:    if (!strcmp(str,")"))
branch  0 never executed
branch  1 never executed
        -:  441:    {
        -:  442:             //fprintf(stdout, "%s\n","rparen.");
    #####:  443:             strcat(r,"rparen.\n");
    #####:  444:             return;
        -:  445:    }
    #####:  446:    if (!strcmp(str,"["))
branch  0 never executed
branch  1 never executed
        -:  447:    {
        -:  448:             //fprintf(stdout, "%s\n","lsquare.");
    #####:  449:             strcat(r,"lsquare.\n");
    #####:  450:             return;
        -:  451:    }
    #####:  452:    if (!strcmp(str,"]"))
branch  0 never executed
branch  1 never executed
        -:  453:    {
        -:  454:             //fprintf(stdout, "%s\n","rsquare.");
    #####:  455:             strcat(r,"rsquare.\n");
    #####:  456:             return;
        -:  457:    }
    #####:  458:    if (!strcmp(str,"'"))
branch  0 never executed
branch  1 never executed
        -:  459:    {
        -:  460:             //fprintf(stdout, "%s\n","quote.");
    #####:  461:             strcat(r,"quote.\n");
    #####:  462:             return;
        -:  463:    }
    #####:  464:    if (!strcmp(str,"`"))
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:             //fprintf(stdout, "%s\n","bquote.");
    #####:  467:             strcat(r,"bquote.\n");
    #####:  468:             return;
        -:  469:    }
        -:  470:    
        -:  471:             //fprintf(stdout, "%s\n","comma.");
    #####:  472:             strcat(r,"comma.\n");
        -:  473:}
        -:  474:
        -:  475:
        -:  476:/*************************************/
        -:  477:/* NAME:        is_spec_symbol       */
        -:  478:/* INPUT:       a pointer to a token */
        -:  479:/* OUTPUT:      a BOOLEAN value      */
        -:  480:/*************************************/
function is_spec_symbol called 137 returned 100% blocks executed 56%
      137:  481:static int is_spec_symbol(str)
        -:  482:    token str;
        -:  483:{
      137:  484:    if (!strcmp(str,"("))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  485:    {  
    #####:  486:        return(TRUE);
        -:  487:    }
      137:  488:    if (!strcmp(str,")"))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  489:    {
    #####:  490:        return(TRUE);
        -:  491:    }
      137:  492:    if (!strcmp(str,"["))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  493:    {
    #####:  494:        return(TRUE);
        -:  495:    }
      137:  496:    if (!strcmp(str,"]"))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  497:    {
    #####:  498:        return(TRUE);
        -:  499:    }
      137:  500:    if (!strcmp(str,"'"))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  501:    {
    #####:  502:        return(TRUE);
        -:  503:    }
      137:  504:    if (!strcmp(str,"`"))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  505:    {
    #####:  506:        return(TRUE);
        -:  507:    }
      137:  508:    if (!strcmp(str,","))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  509:    {
    #####:  510:        return(TRUE);
        -:  511:    }
      137:  512:    return(FALSE);     /* others return FALSE */
        -:  513:}
        -:  514:///////////////////////////////////////////////////////////////////////
function mainQ called 32 returned 100% blocks executed 100%
       32:  515:char * mainQ(char *argv1)
        -:  516:{
        -:  517:   char *fname;
        -:  518:   static char r[2000]="";
        -:  519:   token tok;
        -:  520:   token_stream tp;
       32:  521:    fname=argv1;
       32:  522:    tp=open_token_stream(fname);  /* open token stream */
call    0 returned 100%
        -:  523:
       32:  524:    tok=get_token(&tp);
call    0 returned 100%
      102:  525:    while (is_eof_token(tok) ==FALSE) /* take one token each time until eof */
call    0 returned 100%
branch  1 taken 54%
branch  2 taken 46% (fallthrough)
        -:  526:    {
       38:  527:       print_token(tok,r);
call    0 returned 100%
        -:  528:
       38:  529:       tok=get_token(&tp);
call    0 returned 100%
        -:  530:    }
       32:  531:    print_token(tok,r); /* print eof signal */
call    0 returned 100%
       32:  532:    return r;
        -:  533:}
function main called 32 returned 0% blocks executed 100%
       32:  534:int main(int argc,char *argv[])
        -:  535:{  
       32:  536:    printf("%s",mainQ(argv[1]));
call    0 returned 100%
call    1 returned 100%
       32:  537:    exit(0);
call    0 returned 0%
        -:  538:}
        -:  539:
