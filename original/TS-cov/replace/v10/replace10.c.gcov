        -:    0:Source:replace10.c
        -:    0:Graph:replace10.gcno
        -:    0:Data:replace10.gcda
        -:    0:Runs:57
        -:    0:Programs:1
        -:    1:/*  -*- Last-Edit:  Mon Dec  7 10:31:51 1992 by Tarak S. Goradia; -*- */
        -:    2:
        -:    3:extern void	exit();
        -:    4:# include <stdio.h>
        -:    5:
        -:    6:void	Caseerror();
        -:    7:
        -:    8:typedef char	bool;
        -:    9:# define false 0
        -:   10:# define true  1
        -:   11:# define NULL 0
        -:   12:
        -:   13:# define MAXSTR 100
        -:   14:# define MAXPAT MAXSTR
        -:   15:
        -:   16:# define ENDSTR  '\0'
        -:   17:# define ESCAPE  '@'
        -:   18:# define CLOSURE '*'
        -:   19:# define BOL     '%'
        -:   20:# define EOL     '$'
        -:   21:# define ANY     '?'
        -:   22:# define CCL     '['
        -:   23:# define CCLEND  ']'
        -:   24:# define NEGATE  '^'
        -:   25:# define NCCL    '!'
        -:   26:# define LITCHAR 'c'
        -:   27:# define DITTO   -1
        -:   28:# define DASH    '-'
        -:   29:
        -:   30:# define TAB     9
        -:   31:# define NEWLINE 10
        -:   32:
        -:   33:# define CLOSIZE 1
        -:   34:
        -:   35:typedef char	character;
        -:   36:typedef char string[MAXSTR];
        -:   37:
        -:   38:int
function addstr called 371 returned 100% blocks executed 75%
      371:   39:addstr(c, outset, j, maxset)
        -:   40:char	c;
        -:   41:char	*outset;
        -:   42:int	*j;
        -:   43:int	maxset;
        -:   44:{
        -:   45:    bool	result;
      371:   46:    if (*j >= maxset)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   47:	result = false;
        -:   48:    else {
      371:   49:	outset[*j] = c;
      371:   50:	*j = *j + 1;
      371:   51:	result = true;
        -:   52:    }
      371:   53:    return result;
        -:   54:}
        -:   55:
        -:   56:char
function esc called 65 returned 100% blocks executed 100%
       65:   57:esc(s, i)
        -:   58:char 	*s;
        -:   59:int	*i;
        -:   60:{
        -:   61:    char	result;
       65:   62:    if (s[*i] != ESCAPE)
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
       45:   63:	result = s[*i];
        -:   64:    else
       20:   65:	if (s[*i + 1] == ENDSTR)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        5:   66:	    result = ESCAPE;
        -:   67:	else 
        -:   68:	{
       15:   69:	    *i = *i + 1;
       15:   70:	    if (s[*i] == 'n')
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
        7:   71:		result = NEWLINE;
        -:   72:	    else
        8:   73:		if (s[*i] == 't')
branch  0 taken 63% (fallthrough)
branch  1 taken 38%
        5:   74:		    result = TAB;
        -:   75:		else
        3:   76:		    result = s[*i];
        -:   77:	}
       65:   78:    return result;
        -:   79:}
        -:   80:
        -:   81:char * change();
        -:   82:
        -:   83: void
function dodash called 27 returned 100% blocks executed 100%
       27:   84:dodash(delim, src, i, dest, j, maxset)
        -:   85:char	delim;
        -:   86:char	*src;
        -:   87:int	*i;
        -:   88:char	*dest;
        -:   89:int	*j;
        -:   90:int	maxset;
        -:   91:{
        -:   92:    int	k;
        -:   93:    bool	junk;
        -:   94:    char	escjunk;
        -:   95:
      104:   96:    while ((src[*i] != delim) && (src[*i] != ENDSTR)) 
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
branch  2 taken 86%
branch  3 taken 14% (fallthrough)
        -:   97:    {
       50:   98:	if (src[*i - 1] == ESCAPE) {
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
       12:   99:	    escjunk = esc(src, i);
call    0 returned 100%
       12:  100:	    junk = addstr(escjunk, dest, j, maxset);
call    0 returned 100%
        -:  101:	} else	
       38:  102:	    if (src[*i] != DASH)
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
       26:  103:		junk = addstr(src[*i], dest, j, maxset);
call    0 returned 100%
       16:  104:	    else if (*j <= 1 || src[*i + 1] == ENDSTR)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
        4:  105:		junk = addstr(DASH, dest, j, maxset);
call    0 returned 100%
       19:  106:	    else if ((isalnum(src[*i - 1])) 
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
branch  2 taken 83% (fallthrough)
branch  3 taken 17%
        -:  107:		     /* missing code && (isalnum(src[*i + 1])) */
        6:  108:		&& (src[*i - 1] <= src[*i + 1]))
        -:  109:		{
        9:  110:		    for (k = src[*i-1]+1; k<=src[*i+1]; k++) 
branch  0 taken 44%
branch  1 taken 56% (fallthrough)
        -:  111:		    {
        4:  112:			junk = addstr(k, dest, j, maxset);
call    0 returned 100%
        -:  113:		    }	
        5:  114:		    *i = *i + 1;	
        -:  115:		} 
        -:  116:	    else	
        3:  117:		junk = addstr(DASH, dest, j, maxset);
call    0 returned 100%
       50:  118:	(*i) = (*i) + 1;
        -:  119:    }
       27:  120:}
        -:  121:
        -:  122:bool
function getccl called 27 returned 100% blocks executed 100%
       27:  123:getccl(arg, i, pat, j)
        -:  124:char	*arg;
        -:  125:int	*i;
        -:  126:char	*pat;
        -:  127:int	*j;
        -:  128:{
        -:  129:    int	jstart;
        -:  130:    bool	junk;
        -:  131:
       27:  132:    *i = *i + 1;
       27:  133:    if (arg[*i] == NEGATE) {
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
       15:  134:	junk = addstr(NCCL, pat, j, MAXPAT);
call    0 returned 100%
       15:  135:	*i = *i + 1;
        -:  136:    } else
       12:  137:	junk = addstr(CCL, pat, j, MAXPAT);
call    0 returned 100%
       27:  138:    jstart = *j;
       27:  139:    junk = addstr(0, pat, j, MAXPAT);
call    0 returned 100%
       27:  140:    dodash(CCLEND, arg, i, pat, j, MAXPAT);
call    0 returned 100%
       27:  141:    pat[jstart] = *j - jstart - 1;
       27:  142:    return (arg[*i] == CCLEND);
        -:  143:}
        -:  144:
        -:  145: void
function stclose called 6 returned 100% blocks executed 100%
        6:  146:stclose(pat, j, lastj)
        -:  147:char	*pat;
        -:  148:int	*j;
        -:  149:int	lastj;
        -:  150:{
        -:  151:    int	jt;
        -:  152:    int	jp;
        -:  153:    bool	junk;
        -:  154:
        -:  155:
       15:  156:    for (jp = *j - 1; jp >= lastj ; jp--) 
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        -:  157:    {
        9:  158:	jt = jp + CLOSIZE;
        9:  159:	junk = addstr(pat[jp], pat, &jt, MAXPAT);
call    0 returned 100%
        -:  160:    }
        6:  161:    *j = *j + CLOSIZE;
        6:  162:    pat[lastj] = CLOSURE;
        6:  163:}
        -:  164:
function in_set_2 called 7 returned 100% blocks executed 100%
        7:  165:bool in_set_2(c)
        -:  166:char c;
        -:  167:{
        7:  168:  return (c == BOL || c == EOL || c == CLOSURE);
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  169:}      
        -:  170:
function in_pat_set called 306 returned 100% blocks executed 90%
      306:  171:bool in_pat_set(c)
        -:  172:char c;
        -:  173:{
      306:  174:  return (   c == LITCHAR || c == BOL  || c == EOL || c == ANY 
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 89% (fallthrough)
branch  3 taken 11%
branch  4 taken 98% (fallthrough)
branch  5 taken 2%
branch  6 taken 57% (fallthrough)
branch  7 taken 43%
branch  8 taken 63% (fallthrough)
branch  9 taken 37%
branch 10 taken 11% (fallthrough)
branch 11 taken 89%
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
        -:  175:          || c == CCL     || c == NCCL || c == CLOSURE);
        -:  176:}      
        -:  177:
        -:  178:int
function makepat called 57 returned 100% blocks executed 97%
       57:  179:makepat(arg, start, delim, pat)
        -:  180:char	*arg;
        -:  181:int	start;
        -:  182:char	delim;
        -:  183:char	*pat;
        -:  184:{
        -:  185:    int	result;
        -:  186:    int	i, j, lastj, lj;
        -:  187:    bool	done, junk;
        -:  188:    bool	getres;
        -:  189:    char	escjunk;
        -:  190:
       57:  191:    j = 0;
       57:  192:    i = start;
       57:  193:    lastj = 0;
       57:  194:    done = false;
      193:  195:    while ((!done) && (arg[i] != delim) && (arg[i] != ENDSTR)) {
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 62% (fallthrough)
branch  3 taken 38%
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
       79:  196:	lj = j;
       79:  197:	if ((arg[i] == ANY))
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       21:  198:	    junk = addstr(ANY, pat, &j, MAXPAT);
call    0 returned 100%
       63:  199:	else if ((arg[i] == BOL) && (i == start))
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        5:  200:	    junk = addstr(BOL, pat, &j, MAXPAT);
call    0 returned 100%
       55:  201:	else if ((arg[i] == EOL) && (arg[i+1] == delim))
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        2:  202:	    junk = addstr(EOL, pat, &j, MAXPAT);
call    0 returned 100%
       51:  203:	else if ((arg[i] == CCL)) 
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
        -:  204:	{
       27:  205:	    getres = getccl(arg, &i, pat, &j);
call    0 returned 100%
       27:  206:	    done = (bool)(getres == false);
        -:  207:	} 
       31:  208:	else if ((arg[i] == CLOSURE) && (i > start)) 
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  209:	{
        7:  210:	    lj = lastj;
        7:  211:	    if (in_set_2(pat[lj]))
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
        1:  212:		done = true;
        -:  213:	    else
        6:  214:		stclose(pat, &j, lastj);
call    0 returned 100%
        -:  215:	} 
        -:  216:	else 
        -:  217:	{
       17:  218:	    junk = addstr(LITCHAR, pat, &j, MAXPAT);
call    0 returned 100%
       17:  219:	    escjunk = esc(arg, &i);
call    0 returned 100%
       17:  220:	    junk = addstr(escjunk, pat, &j, MAXPAT);
call    0 returned 100%
        -:  221:	}
       79:  222:	lastj = lj;
       79:  223:	if ((!done))
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       70:  224:	    i = i + 1;
        -:  225:    }	
       57:  226:    junk = addstr(ENDSTR, pat, &j, MAXPAT);
call    0 returned 100%
       66:  227:    if ((done) || (arg[i] != delim))
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        9:  228:	result = 0;
        -:  229:    else
       48:  230:	if ((!junk))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  231:	    result = 0;
        -:  232:	else
       48:  233:	    result = i;
       57:  234:    return result;
        -:  235:}
        -:  236:
        -:  237:int
function getpat called 57 returned 100% blocks executed 100%
       57:  238:getpat(arg, pat)
        -:  239:char*	arg;
        -:  240:char*	pat;
        -:  241:{
        -:  242:    int	makeres;
        -:  243:
       57:  244:    makeres = makepat(arg, 0, ENDSTR, pat);
call    0 returned 100%
       57:  245:    return (makeres > 0);
        -:  246:}
        -:  247:
        -:  248:int
function makesub called 57 returned 100% blocks executed 88%
       57:  249:makesub(arg, from, delim, sub)
        -:  250:	char*	arg;
        -:  251:	int	from;
        -:  252:	character	delim;
        -:  253:	char*	sub;
        -:  254:{
        -:  255:    int  result;
        -:  256:    int	i, j;
        -:  257:    bool	junk;
        -:  258:    character	escjunk;
        -:  259:
       57:  260:    j = 0;
       57:  261:    i = from;
      197:  262:    while ((arg[i] != delim) && (arg[i] != ENDSTR)) {
branch  0 taken 59% (fallthrough)
branch  1 taken 41%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
       83:  263:	if ((arg[i] == (unsigned)('&')))
branch  0 taken 57% (fallthrough)
branch  1 taken 43%
       47:  264:	    junk = addstr(DITTO, sub, &j, MAXPAT);
call    0 returned 100%
        -:  265:	else {
       36:  266:	    escjunk = esc(arg, &i);
call    0 returned 100%
       36:  267:	    junk = addstr(escjunk, sub, &j, MAXPAT);
call    0 returned 100%
        -:  268:	}
       83:  269:	i = i + 1;
        -:  270:    }
       57:  271:    if (arg[i] != delim)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  272:	result = 0;
        -:  273:    else {
       57:  274:	junk = addstr(ENDSTR, &(*sub), &j, MAXPAT);
call    0 returned 100%
       57:  275:	if ((!junk))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  276:	    result = 0;
        -:  277:	else
       57:  278:	    result = i;
        -:  279:    }	
       57:  280:    return result;
        -:  281:}
        -:  282:
        -:  283:bool
function getsub called 57 returned 100% blocks executed 100%
       57:  284:getsub(arg, sub)
        -:  285:	char*	arg;
        -:  286:	char*	sub;
        -:  287:{
        -:  288:    int	makeres;
        -:  289:
       57:  290:    makeres = makesub(arg, 0, ENDSTR, sub);
call    0 returned 100%
       57:  291:    return (makeres > 0);
        -:  292:}
        -:  293:
        -:  294:char * subline();
        -:  295:
        -:  296: bool
function locate called 80 returned 100% blocks executed 100%
       80:  297:locate(c, pat, offset)
        -:  298:	character	c;
        -:  299:	char *	pat;
        -:  300:	int	offset;
        -:  301:{
        -:  302:    int	i;
        -:  303:    bool flag;
        -:  304:
       80:  305:    flag = false;
       80:  306:    i = offset + pat[offset];
      296:  307:    while ((i > offset))
branch  0 taken 63%
branch  1 taken 37% (fallthrough)
        -:  308:    {
      136:  309:	if (c == pat[i]) {
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       12:  310:	    flag = true;
       12:  311:	    i = offset;
        -:  312:	} else
      124:  313:	    i = i - 1;
        -:  314:    }
       80:  315:    return flag;
        -:  316:}
        -:  317:
        -:  318:bool
function omatch called 186 returned 100% blocks executed 88%
      186:  319:omatch(lin, i, pat, j)
        -:  320:	char*	lin;
        -:  321:	int	*i;
        -:  322:	char*	pat;
        -:  323:	int	j;
        -:  324:{
        -:  325:    char	advance;
        -:  326:    bool result;
        -:  327:    
      186:  328:    advance = -1;
      186:  329:    if ((lin[*i] == ENDSTR))
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        2:  330:	result = false;
        -:  331:    else 
        -:  332:    {
      184:  333:	if (!in_pat_set(pat[j]))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  334:	{
    #####:  335:	    (void)fprintf(stdout, "in omatch: can't happen\n");
call    0 never executed
    #####:  336:	    abort();	
call    0 never executed
        -:  337:	} else
        -:  338:	{
      184:  339:	     switch (pat[j]) 
branch  0 taken 11%
branch  1 taken 13%
branch  2 taken 29%
branch  3 taken 3%
branch  4 taken 21%
branch  5 taken 22%
branch  6 taken 0%
        -:  340:	     {			
        -:  341:	     case LITCHAR:
       21:  342:		 if (lin[*i] == pat[j + 1])
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
       13:  343:		     advance = 1;
       21:  344:		 break ;	
        -:  345:	     case BOL:
       24:  346:		 if (*i == 0)
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
        5:  347:		     advance = 0;
       24:  348:		 break ;
        -:  349:	     case ANY:
       53:  350:		 if (lin[*i] != NEWLINE)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       53:  351:		     advance = 1;
       53:  352:		 break ;
        -:  353:	     case EOL:
        6:  354:		 if (lin[*i] == NEWLINE)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  355:		     advance = 0;
        6:  356:		 break ;
        -:  357:	     case CCL:
       39:  358:		 if (locate(lin[*i], pat, j + 1))
call    0 returned 100%
branch  1 taken 18% (fallthrough)
branch  2 taken 82%
        7:  359:		     advance = 1;	
       39:  360:		 break ;
        -:  361:	     case NCCL:
       41:  362:		 if ((lin[*i] != NEWLINE) && (!locate(lin[*i], pat, j+1)))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 88% (fallthrough)
branch  4 taken 12%
       36:  363:		     advance = 1;	
       41:  364:		 break ;
        -:  365:	     default:
    #####:  366:		 Caseerror(pat[j]);
call    0 never executed
        -:  367:	     };
        -:  368:	 }	
        -:  369:    }
      186:  370:    if ((advance >= 0)) 
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
        -:  371:    {
      114:  372:	*i = *i + advance;
      114:  373:	result = true;
        -:  374:    } else
       72:  375:	result = false;
      186:  376:    return result;
        -:  377:}
        -:  378:
        -:  379:
function patsize called 122 returned 100% blocks executed 73%
      122:  380:patsize(pat, n)
        -:  381:	char*	pat;
        -:  382:	int	n;
        -:  383:{
        -:  384:    int size;
      122:  385:    if (!in_pat_set(pat[n])) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  386:	(void)fprintf(stdout, "in patsize: can't happen\n");
call    0 never executed
    #####:  387:	abort();
call    0 never executed
        -:  388:    } else
      122:  389:	switch (pat[n]) 
branch  0 taken 11%
branch  1 taken 44%
branch  2 taken 38%
branch  3 taken 7%
branch  4 taken 0%
        -:  390:	{
       13:  391:	case LITCHAR: size = 2; break;
        -:  392:	    
        -:  393:	case BOL:  case EOL:  case ANY:
       54:  394:	    size = 1;
       54:  395:	    break;
        -:  396:	case CCL:  case NCCL:
       46:  397:	    size = pat[n + 1] + 2;
       46:  398:	    break ;
        -:  399:	case CLOSURE:
        9:  400:	    size = CLOSIZE;
        9:  401:	    break ;
        -:  402:	default:
    #####:  403:	    Caseerror(pat[n]);
call    0 never executed
        -:  404:	}
      122:  405:    return size;
        -:  406:}
        -:  407:
        -:  408:int
function amatch called 169 returned 100% blocks executed 100%
      169:  409:amatch(lin, offset, pat, j)
        -:  410:	char*	lin;
        -:  411:	int	offset;
        -:  412:	char*	pat;
        -:  413:	int	j;
        -:  414:{
        -:  415:    int	i, k;
        -:  416:    bool	result, done;
        -:  417:
      169:  418:    done = false;
      518:  419:    while ((!done) && (pat[j] != ENDSTR))
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
branch  2 taken 66%
branch  3 taken 34% (fallthrough)
      180:  420:	if ((pat[j] == CLOSURE)) {
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        9:  421:	    j = j + patsize(pat, j);
call    0 returned 100%
        9:  422:	    i = offset;
       33:  423:	    while ((!done) && (lin[i] != ENDSTR)) {
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
branch  2 taken 75%
branch  3 taken 25% (fallthrough)
       15:  424:		result = omatch(lin, &i, pat, j);
call    0 returned 100%
       15:  425:		if (!result)	
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        4:  426:		    done = true;
        -:  427:	    }
        9:  428:	    done = false;
       28:  429:	    while ((!done) && (i >= offset)) {
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
       10:  430:		k = amatch(lin, i, pat, j + patsize(pat, j));
call    0 returned 100%
call    1 returned 100%
       10:  431:		if ((k >= 0))
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
        9:  432:		    done = true;
        -:  433:		else
        1:  434:		    i = i - 1;
        -:  435:	    }
        9:  436:	    offset = k;
        9:  437:	    done = true;
        -:  438:	} else {
      171:  439:	    result = omatch(lin, &offset, pat, j);
call    0 returned 100%
      171:  440:	    if ((!result)) {	
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
       68:  441:		offset = -1;
       68:  442:		done = true;
        -:  443:	    } else
      103:  444:		j = j + patsize(pat, j);
call    0 returned 100%
        -:  445:	}
      169:  446:     return offset;
        -:  447:}
        -:  448:
        -:  449:void
function putsub called 92 returned 100% blocks executed 100%
       92:  450:putsub(lin, s1, s2, sub,output,OL)
        -:  451:  char * lin;
        -:  452:  int	s1, s2;
        -:  453:  char * sub;
        -:  454:  char * output;
        -:  455:  int *OL;
        -:  456:{
        -:  457:    int	i;
        -:  458:    int		j;
        -:  459:
       92:  460:    i = 0;
      311:  461:    while ((sub[i] != ENDSTR)) {
branch  0 taken 58%
branch  1 taken 42% (fallthrough)
      127:  462:	if ((sub[i] == DITTO))
branch  0 taken 63% (fallthrough)
branch  1 taken 37%
      171:  463:	    for (j = s1; j < s2; j++) 
branch  0 taken 53%
branch  1 taken 47% (fallthrough)
        -:  464:	    {
        -:  465:		//fputc(lin[j],stdout);
       91:  466:                output[*OL]=lin[j];(*OL)++;
        -:  467:	    }	
        -:  468:	else	
        -:  469:	{
        -:  470:	    //fputc(sub[i],stdout);
       47:  471:            output[*OL]=sub[i];(*OL)++;
        -:  472:         }
      127:  473:	i = i + 1;
        -:  474:    }
       92:  475:}
        -:  476:
        -:  477:char *
function subline called 57 returned 100% blocks executed 100%
       57:  478:subline(lin, pat, sub)
        -:  479: char	*lin;
        -:  480: char   *pat;
        -:  481: char   *sub;
        -:  482:{	
        -:  483:	int	i, lastm, m;
        -:  484:        static char O[2000]="";
       57:  485:        int OL=0;
       57:  486:	lastm = -1;
       57:  487:	i = 0;
      273:  488:	while ((lin[i] != ENDSTR)) 
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
        -:  489:	{
      159:  490:	    m = amatch(lin, i, pat, 0);
call    0 returned 100%
      159:  491:	    if ((m >= 0) && (lastm != m)) {
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       92:  492:		putsub(lin, i, m, sub,O,&OL);
call    0 returned 100%
       92:  493:		lastm = m;
        -:  494:	    }
      235:  495:	    if ((m == -1) || (m == i)) {
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  496:		//fputc(lin[i],stdout);
       76:  497:                O[OL]=lin[i];OL++;
       76:  498:		i = i + 1;
        -:  499:	    } else
       83:  500:		i = m;
        -:  501:	}
       57:  502:        O[OL]='\0';
       57:  503:       return O;
        -:  504:}
        -:  505:
        -:  506: char *
function change called 57 returned 100% blocks executed 100%
       57:  507:change(pat, sub,line)
        -:  508:char *pat, *sub, *line;
        -:  509:{
       57:  510:  return subline(line, pat, sub);
call    0 returned 100%
        -:  511:}
function mainQ called 57 returned 100% blocks executed 100%
       57:  512:char *mainQ(char *argv1, char *argv2, char *argv3)
        -:  513:{
        -:  514:   string pat, sub;
        -:  515:   bool result;
       57:  516:   result = getpat(argv1, pat);
call    0 returned 100%
       57:  517:   result = getsub(argv2, sub);
call    0 returned 100%
       57:  518:   return change(pat,sub,argv3);
call    0 returned 100%
        -:  519:}
function main called 57 returned 100% blocks executed 100%
       57:  520:int main(int argc, char*argv[])
        -:  521:{
        -:  522:   //printf("'%s'\t'%s'\t'%s'END\n",argv[1],argv[2],argv[3]);
       57:  523:   fprintf(stdout,"%s\n",mainQ(argv[1],argv[2],argv[3]));
call    0 returned 100%
call    1 returned 100%
       57:  524:   return 0;
        -:  525:}
        -:  526:
        -:  527:void
function Caseerror called 0 returned 0% blocks executed 0%
    #####:  528:Caseerror(n)
        -:  529:	int	n;
        -:  530:{
    #####:  531:	(void)fprintf(stdout, "Missing case limb: line %d\n", n);
call    0 never executed
    #####:  532:	exit(4);
call    0 never executed
        -:  533:}
