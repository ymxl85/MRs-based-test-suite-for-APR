        -:    0:Source:replace29.c
        -:    0:Graph:replace29.gcno
        -:    0:Data:replace29.gcda
        -:    0:Runs:51
        -:    0:Programs:1
        -:    1:/*  -*- Last-Edit:  Mon Dec  7 10:31:51 1992 by Tarak S. Goradia; -*- */
        -:    2:
        -:    3:extern void	exit();
        -:    4:# include <stdio.h>
        -:    5:
        -:    6:void	Caseerror();
        -:    7:
        -:    8:typedef char	bool;
        -:    9:# define false 0
        -:   10:# define true  1
        -:   11:# define NULL 0
        -:   12:
        -:   13:# define MAXSTR 100
        -:   14:# define MAXPAT MAXSTR
        -:   15:
        -:   16:# define ENDSTR  '\0'
        -:   17:# define ESCAPE  '@'
        -:   18:# define CLOSURE '*'
        -:   19:# define BOL     '%'
        -:   20:# define EOL     '$'
        -:   21:# define ANY     '?'
        -:   22:# define CCL     '['
        -:   23:# define CCLEND  ']'
        -:   24:# define NEGATE  '^'
        -:   25:# define NCCL    '!'
        -:   26:# define LITCHAR 'c'
        -:   27:# define DITTO   -1
        -:   28:# define DASH    '-'
        -:   29:
        -:   30:# define TAB     9
        -:   31:# define NEWLINE 10
        -:   32:
        -:   33:# define CLOSIZE 1
        -:   34:
        -:   35:typedef char	character;
        -:   36:typedef char string[MAXSTR];
        -:   37:
        -:   38:int
function addstr called 310 returned 100% blocks executed 75%
      310:   39:addstr(c, outset, j, maxset)
        -:   40:char	c;
        -:   41:char	*outset;
        -:   42:int	*j;
        -:   43:int	maxset;
        -:   44:{
        -:   45:    bool	result;
      310:   46:    if (*j >= maxset)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   47:	result = false;
        -:   48:    else {
      310:   49:	outset[*j] = c;
      310:   50:	*j = *j + 1;
      310:   51:	result = true;
        -:   52:    }
      310:   53:    return result;
        -:   54:}
        -:   55:
        -:   56:char
function esc called 44 returned 100% blocks executed 100%
       44:   57:esc(s, i)
        -:   58:char 	*s;
        -:   59:int	*i;
        -:   60:{
        -:   61:    char	result;
       44:   62:    if (s[*i] != ESCAPE)
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
       30:   63:	result = s[*i];
        -:   64:    else
       14:   65:	if (s[*i + 1] == ENDSTR)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        4:   66:	    result = ESCAPE;
        -:   67:	else 
        -:   68:	{
       10:   69:	    *i = *i + 1;
       10:   70:	    if (s[*i] == 'n')
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
        3:   71:		result = NEWLINE;
        -:   72:	    else
        7:   73:		if (s[*i] == 't')
branch  0 taken 57% (fallthrough)
branch  1 taken 43%
        4:   74:		    result = TAB;
        -:   75:		else
        3:   76:		    result = s[*i];
        -:   77:	}
       44:   78:    return result;
        -:   79:}
        -:   80:
        -:   81:char * change();
        -:   82:
        -:   83: void
function dodash called 21 returned 100% blocks executed 77%
       21:   84:dodash(delim, src, i, dest, j, maxset)
        -:   85:char	delim;
        -:   86:char	*src;
        -:   87:int	*i;
        -:   88:char	*dest;
        -:   89:int	*j;
        -:   90:int	maxset;
        -:   91:{
        -:   92:    int	k;
        -:   93:    bool	junk;
        -:   94:    char	escjunk;
        -:   95:
       76:   96:    while ((src[*i] != delim) && (src[*i] != ENDSTR)) 
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
branch  2 taken 79%
branch  3 taken 21% (fallthrough)
        -:   97:    {
       34:   98:	if (src[*i - 1] == ESCAPE) {
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
        7:   99:	    escjunk = esc(src, i);
call    0 returned 100%
        7:  100:	    junk = addstr(escjunk, dest, j, maxset);
call    0 returned 100%
        -:  101:	} else	
       27:  102:	    if (src[*i] != DASH)
branch  0 taken 74% (fallthrough)
branch  1 taken 26%
       20:  103:		junk = addstr(src[*i], dest, j, maxset);
call    0 returned 100%
       12:  104:	    else if (*j <= 1 || src[*i + 1] == ENDSTR)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 71% (fallthrough)
branch  3 taken 29%
        5:  105:		junk = addstr(DASH, dest, j, maxset);
call    0 returned 100%
        2:  106:	    else if ((isalnum(src[*i - 1])) && (isalnum(src[*i + 1])) 
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
    #####:  107:		&& (src[*i - 1] <= src[*i + 1]))
        -:  108:		{
    #####:  109:		    for (k = src[*i-1]+1; k<=src[*i+1]; k++) 
branch  0 never executed
branch  1 never executed
        -:  110:		    {
    #####:  111:			junk = addstr(k, dest, j, maxset);
call    0 never executed
        -:  112:		    }	
    #####:  113:		    *i = *i + 1;	
        -:  114:		} 
        -:  115:	    else	
        2:  116:		junk = addstr(DASH, dest, j, maxset);
call    0 returned 100%
       34:  117:	(*i) = (*i) + 1;
        -:  118:    }
       21:  119:}
        -:  120:
        -:  121:bool
function getccl called 21 returned 100% blocks executed 100%
       21:  122:getccl(arg, i, pat, j)
        -:  123:char	*arg;
        -:  124:int	*i;
        -:  125:char	*pat;
        -:  126:int	*j;
        -:  127:{
        -:  128:    int	jstart;
        -:  129:    bool	junk;
        -:  130:
       21:  131:    *i = *i + 1;
       21:  132:    if (arg[*i] == NEGATE) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       14:  133:	junk = addstr(NCCL, pat, j, MAXPAT);
call    0 returned 100%
       14:  134:	*i = *i + 1;
        -:  135:    } else
        7:  136:	junk = addstr(CCL, pat, j, MAXPAT);
call    0 returned 100%
       21:  137:    jstart = *j;
       21:  138:    junk = addstr(0, pat, j, MAXPAT);
call    0 returned 100%
       21:  139:    dodash(CCLEND, arg, i, pat, j, MAXPAT);
call    0 returned 100%
       21:  140:    pat[jstart] = *j - jstart - 1;
       21:  141:    return (arg[*i] == CCLEND);
        -:  142:}
        -:  143:
        -:  144: void
function stclose called 5 returned 100% blocks executed 100%
        5:  145:stclose(pat, j, lastj)
        -:  146:char	*pat;
        -:  147:int	*j;
        -:  148:int	lastj;
        -:  149:{
        -:  150:    int	jt;
        -:  151:    int	jp;
        -:  152:    bool	junk;
        -:  153:
        -:  154:
       12:  155:    for (jp = *j - 1; jp >= lastj ; jp--) 
branch  0 taken 58%
branch  1 taken 42% (fallthrough)
        -:  156:    {
        7:  157:	jt = jp + CLOSIZE;
        7:  158:	junk = addstr(pat[jp], pat, &jt, MAXPAT);
call    0 returned 100%
        -:  159:    }
        5:  160:    *j = *j + CLOSIZE;
        5:  161:    pat[lastj] = CLOSURE;
        5:  162:}
        -:  163:
function in_set_2 called 6 returned 100% blocks executed 100%
        6:  164:bool in_set_2(c)
        -:  165:char c;
        -:  166:{
        6:  167:  return (c == BOL || c == EOL || c == CLOSURE || c == NCCL); //fault nccl
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        -:  168:}      
        -:  169:
function in_pat_set called 278 returned 100% blocks executed 90%
      278:  170:bool in_pat_set(c)
        -:  171:char c;
        -:  172:{
      278:  173:  return (   c == LITCHAR || c == BOL  || c == EOL || c == ANY 
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
branch  2 taken 88% (fallthrough)
branch  3 taken 12%
branch  4 taken 97% (fallthrough)
branch  5 taken 3%
branch  6 taken 55% (fallthrough)
branch  7 taken 45%
branch  8 taken 70% (fallthrough)
branch  9 taken 30%
branch 10 taken 10% (fallthrough)
branch 11 taken 90%
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
        -:  174:          || c == CCL     || c == NCCL || c == CLOSURE);
        -:  175:}      
        -:  176:
        -:  177:int
function makepat called 51 returned 100% blocks executed 97%
       51:  178:makepat(arg, start, delim, pat)
        -:  179:char	*arg;
        -:  180:int	start;
        -:  181:char	delim;
        -:  182:char	*pat;
        -:  183:{
        -:  184:    int	result;
        -:  185:    int	i, j, lastj, lj;
        -:  186:    bool	done, junk;
        -:  187:    bool	getres;
        -:  188:    char	escjunk;
        -:  189:
       51:  190:    j = 0;
       51:  191:    i = start;
       51:  192:    lastj = 0;
       51:  193:    done = false;
      172:  194:    while ((!done) && (arg[i] != delim) && (arg[i] != ENDSTR)) {
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
branch  2 taken 63% (fallthrough)
branch  3 taken 37%
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
       70:  195:	lj = j;
       70:  196:	if ((arg[i] == ANY))
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       19:  197:	    junk = addstr(ANY, pat, &j, MAXPAT);
call    0 returned 100%
       56:  198:	else if ((arg[i] == BOL) && (i == start))
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        5:  199:	    junk = addstr(BOL, pat, &j, MAXPAT);
call    0 returned 100%
       48:  200:	else if ((arg[i] == EOL) && (arg[i+1] == delim))
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        2:  201:	    junk = addstr(EOL, pat, &j, MAXPAT);
call    0 returned 100%
       44:  202:	else if ((arg[i] == CCL)) 
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
        -:  203:	{
       21:  204:	    getres = getccl(arg, &i, pat, &j);
call    0 returned 100%
       21:  205:	    done = (bool)(getres == false);
        -:  206:	} 
       29:  207:	else if ((arg[i] == CLOSURE) && (i > start)) 
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  208:	{
        6:  209:	    lj = lastj;
        6:  210:	    if (in_set_2(pat[lj]))
call    0 returned 100%
branch  1 taken 17% (fallthrough)
branch  2 taken 83%
        1:  211:		done = true;
        -:  212:	    else
        5:  213:		stclose(pat, &j, lastj);
call    0 returned 100%
        -:  214:	} 
        -:  215:	else 
        -:  216:	{
       17:  217:	    junk = addstr(LITCHAR, pat, &j, MAXPAT);
call    0 returned 100%
       17:  218:	    escjunk = esc(arg, &i);
call    0 returned 100%
       17:  219:	    junk = addstr(escjunk, pat, &j, MAXPAT);
call    0 returned 100%
        -:  220:	}
       70:  221:	lastj = lj;
       70:  222:	if ((!done))
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
       60:  223:	    i = i + 1;
        -:  224:    }	
       51:  225:    junk = addstr(ENDSTR, pat, &j, MAXPAT);
call    0 returned 100%
       61:  226:    if ((done) || (arg[i] != delim))
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
       10:  227:	result = 0;
        -:  228:    else
       41:  229:	if ((!junk))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  230:	    result = 0;
        -:  231:	else
       41:  232:	    result = i;
       51:  233:    return result;
        -:  234:}
        -:  235:
        -:  236:int
function getpat called 51 returned 100% blocks executed 100%
       51:  237:getpat(arg, pat)
        -:  238:char*	arg;
        -:  239:char*	pat;
        -:  240:{
        -:  241:    int	makeres;
        -:  242:
       51:  243:    makeres = makepat(arg, 0, ENDSTR, pat);
call    0 returned 100%
       51:  244:    return (makeres > 0);
        -:  245:}
        -:  246:
        -:  247:int
function makesub called 51 returned 100% blocks executed 88%
       51:  248:makesub(arg, from, delim, sub)
        -:  249:	char*	arg;
        -:  250:	int	from;
        -:  251:	character	delim;
        -:  252:	char*	sub;
        -:  253:{
        -:  254:    int  result;
        -:  255:    int	i, j;
        -:  256:    bool	junk;
        -:  257:    character	escjunk;
        -:  258:
       51:  259:    j = 0;
       51:  260:    i = from;
      167:  261:    while ((arg[i] != delim) && (arg[i] != ENDSTR)) {
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
       65:  262:	if ((arg[i] == (unsigned)('&')))
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
       45:  263:	    junk = addstr(DITTO, sub, &j, MAXPAT);
call    0 returned 100%
        -:  264:	else {
       20:  265:	    escjunk = esc(arg, &i);
call    0 returned 100%
       20:  266:	    junk = addstr(escjunk, sub, &j, MAXPAT);
call    0 returned 100%
        -:  267:	}
       65:  268:	i = i + 1;
        -:  269:    }
       51:  270:    if (arg[i] != delim)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  271:	result = 0;
        -:  272:    else {
       51:  273:	junk = addstr(ENDSTR, &(*sub), &j, MAXPAT);
call    0 returned 100%
       51:  274:	if ((!junk))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  275:	    result = 0;
        -:  276:	else
       51:  277:	    result = i;
        -:  278:    }	
       51:  279:    return result;
        -:  280:}
        -:  281:
        -:  282:bool
function getsub called 51 returned 100% blocks executed 100%
       51:  283:getsub(arg, sub)
        -:  284:	char*	arg;
        -:  285:	char*	sub;
        -:  286:{
        -:  287:    int	makeres;
        -:  288:
       51:  289:    makeres = makesub(arg, 0, ENDSTR, sub);
call    0 returned 100%
       51:  290:    return (makeres > 0);
        -:  291:}
        -:  292:
        -:  293:char * subline();
        -:  294:
        -:  295: bool
function locate called 64 returned 100% blocks executed 100%
       64:  296:locate(c, pat, offset)
        -:  297:	character	c;
        -:  298:	char *	pat;
        -:  299:	int	offset;
        -:  300:{
        -:  301:    int	i;
        -:  302:    bool flag;
        -:  303:
       64:  304:    flag = false;
       64:  305:    i = offset + pat[offset];
      218:  306:    while ((i > offset))
branch  0 taken 58%
branch  1 taken 42% (fallthrough)
        -:  307:    {
       90:  308:	if (c == pat[i]) {
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
       10:  309:	    flag = true;
       10:  310:	    i = offset;
        -:  311:	} else
       80:  312:	    i = i - 1;
        -:  313:    }
       64:  314:    return flag;
        -:  315:}
        -:  316:
        -:  317:bool
function omatch called 166 returned 100% blocks executed 88%
      166:  318:omatch(lin, i, pat, j)
        -:  319:	char*	lin;
        -:  320:	int	*i;
        -:  321:	char*	pat;
        -:  322:	int	j;
        -:  323:{
        -:  324:    char	advance;
        -:  325:    bool result;
        -:  326:    
      166:  327:    advance = -1;
      166:  328:    if ((lin[*i] == ENDSTR))
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        2:  329:	result = false;
        -:  330:    else 
        -:  331:    {
      164:  332:	if (!in_pat_set(pat[j]))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  333:	{
    #####:  334:	    (void)fprintf(stdout, "in omatch: can't happen\n");
call    0 never executed
    #####:  335:	    abort();	
call    0 never executed
        -:  336:	} else
        -:  337:	{
      164:  338:	     switch (pat[j]) 
branch  0 taken 13%
branch  1 taken 15%
branch  2 taken 30%
branch  3 taken 4%
branch  4 taken 15%
branch  5 taken 24%
branch  6 taken 0%
        -:  339:	     {			
        -:  340:	     case LITCHAR:
       21:  341:		 if (lin[*i] == pat[j + 1])
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
       13:  342:		     advance = 1;
       21:  343:		 break ;	
        -:  344:	     case BOL:
       24:  345:		 if (*i == 0)
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
        5:  346:		     advance = 0;
       24:  347:		 break ;
        -:  348:	     case ANY:
       49:  349:		 if (lin[*i] != NEWLINE)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       49:  350:		     advance = 1;
       49:  351:		 break ;
        -:  352:	     case EOL:
        6:  353:		 if (lin[*i] == NEWLINE)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  354:		     advance = 0;
        6:  355:		 break ;
        -:  356:	     case CCL:
       25:  357:		 if (locate(lin[*i], pat, j + 1))
call    0 returned 100%
branch  1 taken 20% (fallthrough)
branch  2 taken 80%
        5:  358:		     advance = 1;	
       25:  359:		 break ;
        -:  360:	     case NCCL:
       39:  361:		 if ((lin[*i] != NEWLINE) && (!locate(lin[*i], pat, j+1)))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 87% (fallthrough)
branch  4 taken 13%
       34:  362:		     advance = 1;	
       39:  363:		 break ;
        -:  364:	     default:
    #####:  365:		 Caseerror(pat[j]);
call    0 never executed
        -:  366:	     };
        -:  367:	 }	
        -:  368:    }
      166:  369:    if ((advance >= 0)) 
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
        -:  370:    {
      106:  371:	*i = *i + advance;
      106:  372:	result = true;
        -:  373:    } else
       60:  374:	result = false;
      166:  375:    return result;
        -:  376:}
        -:  377:
        -:  378:
function patsize called 114 returned 100% blocks executed 73%
      114:  379:patsize(pat, n)
        -:  380:	char*	pat;
        -:  381:	int	n;
        -:  382:{
        -:  383:    int size;
      114:  384:    if (!in_pat_set(pat[n])) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  385:	(void)fprintf(stdout, "in patsize: can't happen\n");
call    0 never executed
    #####:  386:	abort();
call    0 never executed
        -:  387:    } else
      114:  388:	switch (pat[n]) 
branch  0 taken 11%
branch  1 taken 44%
branch  2 taken 38%
branch  3 taken 7%
branch  4 taken 0%
        -:  389:	{
       13:  390:	case LITCHAR: size = 2; break;
        -:  391:	    
        -:  392:	case BOL:  case EOL:  case ANY:
       50:  393:	    size = 1;
       50:  394:	    break;
        -:  395:	case CCL:  case NCCL:
       43:  396:	    size = pat[n + 1] + 2;
       43:  397:	    break ;
        -:  398:	case CLOSURE:
        8:  399:	    size = CLOSIZE;
        8:  400:	    break ;
        -:  401:	default:
    #####:  402:	    Caseerror(pat[n]);
call    0 never executed
        -:  403:	}
      114:  404:    return size;
        -:  405:}
        -:  406:
        -:  407:int
function amatch called 153 returned 100% blocks executed 100%
      153:  408:amatch(lin, offset, pat, j)
        -:  409:	char*	lin;
        -:  410:	int	offset;
        -:  411:	char*	pat;
        -:  412:	int	j;
        -:  413:{
        -:  414:    int	i, k;
        -:  415:    bool	result, done;
        -:  416:
      153:  417:    done = false;
      467:  418:    while ((!done) && (pat[j] != ENDSTR))
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
branch  2 taken 64%
branch  3 taken 36% (fallthrough)
      161:  419:	if ((pat[j] == CLOSURE)) {
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        8:  420:	    j = j + patsize(pat, j);
call    0 returned 100%
        8:  421:	    i = offset;
       29:  422:	    while ((!done) && (lin[i] != ENDSTR)) {
branch  0 taken 81% (fallthrough)
branch  1 taken 19%
branch  2 taken 76%
branch  3 taken 24% (fallthrough)
       13:  423:		result = omatch(lin, &i, pat, j);
call    0 returned 100%
       13:  424:		if (!result)	
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
        4:  425:		    done = true;
        -:  426:	    }
        8:  427:	    done = false;
       25:  428:	    while ((!done) && (i >= offset)) {
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
        9:  429:		k = amatch(lin, i, pat, j + patsize(pat, j));
call    0 returned 100%
call    1 returned 100%
        9:  430:		if ((k >= 0))
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        8:  431:		    done = true;
        -:  432:		else
        1:  433:		    i = i - 1;
        -:  434:	    }
        8:  435:	    offset = k;
        8:  436:	    done = true;
        -:  437:	} else {
      153:  438:	    result = omatch(lin, &offset, pat, j);
call    0 returned 100%
      153:  439:	    if ((!result)) {	
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
       56:  440:		offset = -1;
       56:  441:		done = true;
        -:  442:	    } else
       97:  443:		j = j + patsize(pat, j);
call    0 returned 100%
        -:  444:	}
      153:  445:     return offset;
        -:  446:}
        -:  447:
        -:  448:void
function putsub called 89 returned 100% blocks executed 100%
       89:  449:putsub(lin, s1, s2, sub,output,OL)
        -:  450:  char * lin;
        -:  451:  int	s1, s2;
        -:  452:  char * sub;
        -:  453:  char * output;
        -:  454:  int *OL;
        -:  455:{
        -:  456:    int	i;
        -:  457:    int		j;
        -:  458:
       89:  459:    i = 0;
      296:  460:    while ((sub[i] != ENDSTR)) {
branch  0 taken 57%
branch  1 taken 43% (fallthrough)
      118:  461:	if ((sub[i] == DITTO))
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
      166:  462:	    for (j = s1; j < s2; j++) 
branch  0 taken 52%
branch  1 taken 48% (fallthrough)
        -:  463:	    {
        -:  464:		//fputc(lin[j],stdout);
       87:  465:                output[*OL]=lin[j];(*OL)++;
        -:  466:	    }	
        -:  467:	else	
        -:  468:	{
        -:  469:	    //fputc(sub[i],stdout);
       39:  470:            output[*OL]=sub[i];(*OL)++;
        -:  471:         }
      118:  472:	i = i + 1;
        -:  473:    }
       89:  474:}
        -:  475:
        -:  476:char *
function subline called 51 returned 100% blocks executed 100%
       51:  477:subline(lin, pat, sub)
        -:  478: char	*lin;
        -:  479: char   *pat;
        -:  480: char   *sub;
        -:  481:{	
        -:  482:	int	i, lastm, m;
        -:  483:        static char O[2000]="";
       51:  484:        int OL=0;
       51:  485:	lastm = -1;
       51:  486:	i = 0;
      246:  487:	while ((lin[i] != ENDSTR)) 
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
        -:  488:	{
      144:  489:	    m = amatch(lin, i, pat, 0);
call    0 returned 100%
      144:  490:	    if ((m >= 0) && (lastm != m)) {
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       89:  491:		putsub(lin, i, m, sub,O,&OL);
call    0 returned 100%
       89:  492:		lastm = m;
        -:  493:	    }
      208:  494:	    if ((m == -1) || (m == i)) {
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  495:		//fputc(lin[i],stdout);
       64:  496:                O[OL]=lin[i];OL++;
       64:  497:		i = i + 1;
        -:  498:	    } else
       80:  499:		i = m;
        -:  500:	}
       51:  501:        O[OL]='\0';
       51:  502:       return O;
        -:  503:}
        -:  504:
        -:  505: char *
function change called 51 returned 100% blocks executed 100%
       51:  506:change(pat, sub,line)
        -:  507:char *pat, *sub, *line;
        -:  508:{
       51:  509:  return subline(line, pat, sub);
call    0 returned 100%
        -:  510:}
function mainQ called 51 returned 100% blocks executed 100%
       51:  511:char *mainQ(char *argv1, char *argv2, char *argv3)
        -:  512:{
        -:  513:   string pat, sub;
        -:  514:   bool result;
       51:  515:   result = getpat(argv1, pat);
call    0 returned 100%
       51:  516:   result = getsub(argv2, sub);
call    0 returned 100%
       51:  517:   return change(pat,sub,argv3);
call    0 returned 100%
        -:  518:}
function main called 51 returned 100% blocks executed 100%
       51:  519:int main(int argc, char*argv[])
        -:  520:{
        -:  521:   //printf("'%s'\t'%s'\t'%s'END\n",argv[1],argv[2],argv[3]);
       51:  522:   fprintf(stdout,"%s\n",mainQ(argv[1],argv[2],argv[3]));
call    0 returned 100%
call    1 returned 100%
       51:  523:   return 0;
        -:  524:}
        -:  525:
        -:  526:void
function Caseerror called 0 returned 0% blocks executed 0%
    #####:  527:Caseerror(n)
        -:  528:	int	n;
        -:  529:{
    #####:  530:	(void)fprintf(stdout, "Missing case limb: line %d\n", n);
call    0 never executed
    #####:  531:	exit(4);
call    0 never executed
        -:  532:}
