        -:    0:Source:replace2.c
        -:    0:Graph:replace2.gcno
        -:    0:Data:replace2.gcda
        -:    0:Runs:45
        -:    0:Programs:1
        -:    1:/*  -*- Last-Edit:  Mon Dec  7 10:31:51 1992 by Tarak S. Goradia; -*- */
        -:    2:
        -:    3:extern void	exit();
        -:    4:# include <stdio.h>
        -:    5:
        -:    6:void	Caseerror();
        -:    7:
        -:    8:typedef char	bool;
        -:    9:# define false 0
        -:   10:# define true  1
        -:   11:# define NULL 0
        -:   12:
        -:   13:# define MAXSTR 100
        -:   14:# define MAXPAT MAXSTR
        -:   15:
        -:   16:# define ENDSTR  '\0'
        -:   17:# define ESCAPE  '@'
        -:   18:# define CLOSURE '*'
        -:   19:# define BOL     '%'
        -:   20:# define EOL     '$'
        -:   21:# define ANY     '?'
        -:   22:# define CCL     '['
        -:   23:# define CCLEND  ']'
        -:   24:# define NEGATE  '^'
        -:   25:# define NCCL    '!'
        -:   26:# define LITCHAR 'c'
        -:   27:# define DITTO   -1
        -:   28:# define DASH    '-'
        -:   29:
        -:   30:# define TAB     9
        -:   31:# define NEWLINE 10
        -:   32:
        -:   33:# define CLOSIZE 1
        -:   34:
        -:   35:typedef char	character;
        -:   36:typedef char string[MAXSTR];
        -:   37:
        -:   38:int
function addstr called 263 returned 100% blocks executed 75%
      263:   39:addstr(c, outset, j, maxset)
        -:   40:char	c;
        -:   41:char	*outset;
        -:   42:int	*j;
        -:   43:int	maxset;
        -:   44:{
        -:   45:    bool	result;
      263:   46:    if (*j >= maxset)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   47:	result = false;
        -:   48:    else {
      263:   49:	outset[*j] = c;
      263:   50:	*j = *j + 1;
      263:   51:	result = true;
        -:   52:    }
      263:   53:    return result;
        -:   54:}
        -:   55:
        -:   56:char
function esc called 40 returned 100% blocks executed 100%
       40:   57:esc(s, i)
        -:   58:char 	*s;
        -:   59:int	*i;
        -:   60:{
        -:   61:    char	result;
       40:   62:    if (s[*i] != ESCAPE)
branch  0 taken 78% (fallthrough)
branch  1 taken 23%
       31:   63:	result = s[*i];
        -:   64:    else
        9:   65:	if (s[*i + 1] == ENDSTR)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        3:   66:	    result = ESCAPE;
        -:   67:	else 
        -:   68:	{
        6:   69:	    *i = *i + 1;
        6:   70:	    if (s[*i] == 'n')
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:   71:		result = NEWLINE;
        -:   72:	    else
        4:   73:		if (s[*i] == 't')
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:   74:		    result = TAB;
        -:   75:		else
        2:   76:		    result = s[*i];
        -:   77:	}
       40:   78:    return result;
        -:   79:}
        -:   80:
        -:   81:char * change();
        -:   82:
        -:   83:void
function dodash called 14 returned 100% blocks executed 68%
       14:   84:dodash(delim, src, i, dest, j, maxset)
        -:   85:char	delim;
        -:   86:char	*src;
        -:   87:int	*i;
        -:   88:char	*dest;
        -:   89:int	*j;
        -:   90:int	maxset;
        -:   91:{
        -:   92:    int	k;
        -:   93:    bool	junk;
        -:   94:    char	escjunk;
        -:   95:
       38:   96:    while ((src[*i] != delim) && (src[*i] != ENDSTR)) 
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
branch  2 taken 63%
branch  3 taken 38% (fallthrough)
        -:   97:    {
        -:   98:/*	if (src[*i - 1] == ESCAPE) {
        -:   99:	    escjunk = esc(src, i);
        -:  100:	    junk = addstr(escjunk, dest, j, maxset); //fault
        -:  101:	} else	*/
       10:  102:	    if (src[*i] != DASH)
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        4:  103:		junk = addstr(src[*i], dest, j, maxset);
call    0 returned 100%
       10:  104:	    else if (*j <= 1 || src[*i + 1] == ENDSTR)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
        4:  105:		junk = addstr(DASH, dest, j, maxset);
call    0 returned 100%
        2:  106:	    else if ((isalnum(src[*i - 1])) && (isalnum(src[*i + 1])) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  107:		&& (src[*i - 1] <= src[*i + 1]))
        -:  108:		{
    #####:  109:		    for (k = src[*i-1]+1; k<=src[*i+1]; k++) 
branch  0 never executed
branch  1 never executed
        -:  110:		    {
    #####:  111:			junk = addstr(k, dest, j, maxset);
call    0 never executed
        -:  112:		    }	
    #####:  113:		    *i = *i + 1;	
        -:  114:		} 
        -:  115:	    else	
        2:  116:		junk = addstr(DASH, dest, j, maxset);
call    0 returned 100%
       10:  117:	(*i) = (*i) + 1;
        -:  118:    }
       14:  119:}
        -:  120:
        -:  121:
        -:  122:bool
function getccl called 14 returned 100% blocks executed 100%
       14:  123:getccl(arg, i, pat, j)
        -:  124:char	*arg;
        -:  125:int	*i;
        -:  126:char	*pat;
        -:  127:int	*j;
        -:  128:{
        -:  129:    int	jstart;
        -:  130:    bool	junk;
        -:  131:
       14:  132:    *i = *i + 1;
       14:  133:    if (arg[*i] == NEGATE) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        7:  134:	junk = addstr(NCCL, pat, j, MAXPAT);
call    0 returned 100%
        7:  135:	*i = *i + 1;
        -:  136:    } else
        7:  137:	junk = addstr(CCL, pat, j, MAXPAT);
call    0 returned 100%
       14:  138:    jstart = *j;
       14:  139:    junk = addstr(0, pat, j, MAXPAT);
call    0 returned 100%
       14:  140:    dodash(CCLEND, arg, i, pat, j, MAXPAT);
call    0 returned 100%
       14:  141:    pat[jstart] = *j - jstart - 1;
       14:  142:    return (arg[*i] == CCLEND);
        -:  143:}
        -:  144:
        -:  145: void
function stclose called 6 returned 100% blocks executed 100%
        6:  146:stclose(pat, j, lastj)
        -:  147:char	*pat;
        -:  148:int	*j;
        -:  149:int	lastj;
        -:  150:{
        -:  151:    int	jt;
        -:  152:    int	jp;
        -:  153:    bool	junk;
        -:  154:
        -:  155:
       15:  156:    for (jp = *j - 1; jp >= lastj ; jp--) 
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        -:  157:    {
        9:  158:	jt = jp + CLOSIZE;
        9:  159:	junk = addstr(pat[jp], pat, &jt, MAXPAT);
call    0 returned 100%
        -:  160:    }
        6:  161:    *j = *j + CLOSIZE;
        6:  162:    pat[lastj] = CLOSURE;
        6:  163:}
        -:  164:
function in_set_2 called 7 returned 100% blocks executed 100%
        7:  165:bool in_set_2(c)
        -:  166:char c;
        -:  167:{
        7:  168:  return (c == BOL || c == EOL || c == CLOSURE);
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  169:}      
        -:  170:
function in_pat_set called 247 returned 100% blocks executed 90%
      247:  171:bool in_pat_set(c)
        -:  172:char c;
        -:  173:{
      247:  174:  return (   c == LITCHAR || c == BOL  || c == EOL || c == ANY 
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
branch  2 taken 84% (fallthrough)
branch  3 taken 16%
branch  4 taken 97% (fallthrough)
branch  5 taken 3%
branch  6 taken 44% (fallthrough)
branch  7 taken 56%
branch  8 taken 56% (fallthrough)
branch  9 taken 44%
branch 10 taken 22% (fallthrough)
branch 11 taken 78%
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
        -:  175:          || c == CCL     || c == NCCL || c == CLOSURE);
        -:  176:}      
        -:  177:
        -:  178:int
function makepat called 45 returned 100% blocks executed 97%
       45:  179:makepat(arg, start, delim, pat)
        -:  180:char	*arg;
        -:  181:int	start;
        -:  182:char	delim;
        -:  183:char	*pat;
        -:  184:{
        -:  185:    int	result;
        -:  186:    int	i, j, lastj, lj;
        -:  187:    bool	done, junk;
        -:  188:    bool	getres;
        -:  189:    char	escjunk;
        -:  190:
       45:  191:    j = 0;
       45:  192:    i = start;
       45:  193:    lastj = 0;
       45:  194:    done = false;
      158:  195:    while ((!done) && (arg[i] != delim) && (arg[i] != ENDSTR)) {
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
branch  2 taken 64% (fallthrough)
branch  3 taken 36%
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
       68:  196:	lj = j;
       68:  197:	if ((arg[i] == ANY))
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
       19:  198:	    junk = addstr(ANY, pat, &j, MAXPAT);
call    0 returned 100%
       55:  199:	else if ((arg[i] == BOL) && (i == start))
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        6:  200:	    junk = addstr(BOL, pat, &j, MAXPAT);
call    0 returned 100%
       45:  201:	else if ((arg[i] == EOL) && (arg[i+1] == delim))
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
        2:  202:	    junk = addstr(EOL, pat, &j, MAXPAT);
call    0 returned 100%
       41:  203:	else if ((arg[i] == CCL)) 
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -:  204:	{
       14:  205:	    getres = getccl(arg, &i, pat, &j);
call    0 returned 100%
       14:  206:	    done = (bool)(getres == false);
        -:  207:	} 
       34:  208:	else if ((arg[i] == CLOSURE) && (i > start)) 
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  209:	{
        7:  210:	    lj = lastj;
        7:  211:	    if (in_set_2(pat[lj]))
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
        1:  212:		done = true;
        -:  213:	    else
        6:  214:		stclose(pat, &j, lastj);
call    0 returned 100%
        -:  215:	} 
        -:  216:	else 
        -:  217:	{
       20:  218:	    junk = addstr(LITCHAR, pat, &j, MAXPAT);
call    0 returned 100%
       20:  219:	    escjunk = esc(arg, &i);
call    0 returned 100%
       20:  220:	    junk = addstr(escjunk, pat, &j, MAXPAT);
call    0 returned 100%
        -:  221:	}
       68:  222:	lastj = lj;
       68:  223:	if ((!done))
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
       61:  224:	    i = i + 1;
        -:  225:    }	
       45:  226:    junk = addstr(ENDSTR, pat, &j, MAXPAT);
call    0 returned 100%
       52:  227:    if ((done) || (arg[i] != delim))
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        7:  228:	result = 0;
        -:  229:    else
       38:  230:	if ((!junk))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  231:	    result = 0;
        -:  232:	else
       38:  233:	    result = i;
       45:  234:    return result;
        -:  235:}
        -:  236:
        -:  237:int
function getpat called 45 returned 100% blocks executed 100%
       45:  238:getpat(arg, pat)
        -:  239:char*	arg;
        -:  240:char*	pat;
        -:  241:{
        -:  242:    int	makeres;
        -:  243:
       45:  244:    makeres = makepat(arg, 0, ENDSTR, pat);
call    0 returned 100%
       45:  245:    return (makeres > 0);
        -:  246:}
        -:  247:
        -:  248:int
function makesub called 45 returned 100% blocks executed 88%
       45:  249:makesub(arg, from, delim, sub)
        -:  250:	char*	arg;
        -:  251:	int	from;
        -:  252:	character	delim;
        -:  253:	char*	sub;
        -:  254:{
        -:  255:    int  result;
        -:  256:    int	i, j;
        -:  257:    bool	junk;
        -:  258:    character	escjunk;
        -:  259:
       45:  260:    j = 0;
       45:  261:    i = from;
      149:  262:    while ((arg[i] != delim) && (arg[i] != ENDSTR)) {
branch  0 taken 57% (fallthrough)
branch  1 taken 43%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
       59:  263:	if ((arg[i] == (unsigned)('&')))
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
       39:  264:	    junk = addstr(DITTO, sub, &j, MAXPAT);
call    0 returned 100%
        -:  265:	else {
       20:  266:	    escjunk = esc(arg, &i);
call    0 returned 100%
       20:  267:	    junk = addstr(escjunk, sub, &j, MAXPAT);
call    0 returned 100%
        -:  268:	}
       59:  269:	i = i + 1;
        -:  270:    }
       45:  271:    if (arg[i] != delim)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  272:	result = 0;
        -:  273:    else {
       45:  274:	junk = addstr(ENDSTR, &(*sub), &j, MAXPAT);
call    0 returned 100%
       45:  275:	if ((!junk))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  276:	    result = 0;
        -:  277:	else
       45:  278:	    result = i;
        -:  279:    }	
       45:  280:    return result;
        -:  281:}
        -:  282:
        -:  283:bool
function getsub called 45 returned 100% blocks executed 100%
       45:  284:getsub(arg, sub)
        -:  285:	char*	arg;
        -:  286:	char*	sub;
        -:  287:{
        -:  288:    int	makeres;
        -:  289:
       45:  290:    makeres = makesub(arg, 0, ENDSTR, sub);
call    0 returned 100%
       45:  291:    return (makeres > 0);
        -:  292:}
        -:  293:
        -:  294:char * subline();
        -:  295:
        -:  296: bool
function locate called 39 returned 100% blocks executed 100%
       39:  297:locate(c, pat, offset)
        -:  298:	character	c;
        -:  299:	char *	pat;
        -:  300:	int	offset;
        -:  301:{
        -:  302:    int	i;
        -:  303:    bool flag;
        -:  304:
       39:  305:    flag = false;
       39:  306:    i = offset + pat[offset];
      101:  307:    while ((i > offset))
branch  0 taken 37%
branch  1 taken 63% (fallthrough)
        -:  308:    {
       23:  309:	if (c == pat[i]) {
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
        7:  310:	    flag = true;
        7:  311:	    i = offset;
        -:  312:	} else
       16:  313:	    i = i - 1;
        -:  314:    }
       39:  315:    return flag;
        -:  316:}
        -:  317:
        -:  318:bool
function omatch called 148 returned 100% blocks executed 88%
      148:  319:omatch(lin, i, pat, j)
        -:  320:	char*	lin;
        -:  321:	int	*i;
        -:  322:	char*	pat;
        -:  323:	int	j;
        -:  324:{
        -:  325:    char	advance;
        -:  326:    bool result;
        -:  327:    
      148:  328:    advance = -1;
      148:  329:    if ((lin[*i] == ENDSTR))
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        2:  330:	result = false;
        -:  331:    else 
        -:  332:    {
      146:  333:	if (!in_pat_set(pat[j]))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  334:	{
    #####:  335:	    (void)fprintf(stdout, "in omatch: can't happen\n");
call    0 never executed
    #####:  336:	    abort();	
call    0 never executed
        -:  337:	} else
        -:  338:	{
      146:  339:	     switch (pat[j]) 
branch  0 taken 16%
branch  1 taken 19%
branch  2 taken 34%
branch  3 taken 4%
branch  4 taken 15%
branch  5 taken 12%
branch  6 taken 0%
        -:  340:	     {			
        -:  341:	     case LITCHAR:
       24:  342:		 if (lin[*i] == pat[j + 1])
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       16:  343:		     advance = 1;
       24:  344:		 break ;	
        -:  345:	     case BOL:
       28:  346:		 if (*i == 0)
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
        6:  347:		     advance = 0;
       28:  348:		 break ;
        -:  349:	     case ANY:
       49:  350:		 if (lin[*i] != NEWLINE)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       49:  351:		     advance = 1;
       49:  352:		 break ;
        -:  353:	     case EOL:
        6:  354:		 if (lin[*i] == NEWLINE)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  355:		     advance = 0;
        6:  356:		 break ;
        -:  357:	     case CCL:
       22:  358:		 if (locate(lin[*i], pat, j + 1))
call    0 returned 100%
branch  1 taken 27% (fallthrough)
branch  2 taken 73%
        6:  359:		     advance = 1;	
       22:  360:		 break ;
        -:  361:	     case NCCL:
       17:  362:		 if ((lin[*i] != NEWLINE) && (!locate(lin[*i], pat, j+1)))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 94% (fallthrough)
branch  4 taken 6%
       16:  363:		     advance = 1;	
       17:  364:		 break ;
        -:  365:	     default:
    #####:  366:		 Caseerror(pat[j]);
call    0 never executed
        -:  367:	     };
        -:  368:	 }	
        -:  369:    }
      148:  370:    if ((advance >= 0)) 
branch  0 taken 63% (fallthrough)
branch  1 taken 37%
        -:  371:    {
       93:  372:	*i = *i + advance;
       93:  373:	result = true;
        -:  374:    } else
       55:  375:	result = false;
      148:  376:    return result;
        -:  377:}
        -:  378:
        -:  379:
function patsize called 101 returned 100% blocks executed 73%
      101:  380:patsize(pat, n)
        -:  381:	char*	pat;
        -:  382:	int	n;
        -:  383:{
        -:  384:    int size;
      101:  385:    if (!in_pat_set(pat[n])) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  386:	(void)fprintf(stdout, "in patsize: can't happen\n");
call    0 never executed
    #####:  387:	abort();
call    0 never executed
        -:  388:    } else
      101:  389:	switch (pat[n]) 
branch  0 taken 16%
branch  1 taken 50%
branch  2 taken 25%
branch  3 taken 9%
branch  4 taken 0%
        -:  390:	{
       16:  391:	case LITCHAR: size = 2; break;
        -:  392:	    
        -:  393:	case BOL:  case EOL:  case ANY:
       51:  394:	    size = 1;
       51:  395:	    break;
        -:  396:	case CCL:  case NCCL:
       25:  397:	    size = pat[n + 1] + 2;
       25:  398:	    break ;
        -:  399:	case CLOSURE:
        9:  400:	    size = CLOSIZE;
        9:  401:	    break ;
        -:  402:	default:
    #####:  403:	    Caseerror(pat[n]);
call    0 never executed
        -:  404:	}
      101:  405:    return size;
        -:  406:}
        -:  407:
        -:  408:int
function amatch called 132 returned 100% blocks executed 100%
      132:  409:amatch(lin, offset, pat, j)
        -:  410:	char*	lin;
        -:  411:	int	offset;
        -:  412:	char*	pat;
        -:  413:	int	j;
        -:  414:{
        -:  415:    int	i, k;
        -:  416:    bool	result, done;
        -:  417:
      132:  418:    done = false;
      406:  419:    while ((!done) && (pat[j] != ENDSTR))
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
branch  2 taken 66%
branch  3 taken 34% (fallthrough)
      142:  420:	if ((pat[j] == CLOSURE)) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        9:  421:	    j = j + patsize(pat, j);
call    0 returned 100%
        9:  422:	    i = offset;
       33:  423:	    while ((!done) && (lin[i] != ENDSTR)) {
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
branch  2 taken 75%
branch  3 taken 25% (fallthrough)
       15:  424:		result = omatch(lin, &i, pat, j);
call    0 returned 100%
       15:  425:		if (!result)	
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        4:  426:		    done = true;
        -:  427:	    }
        9:  428:	    done = false;
       28:  429:	    while ((!done) && (i >= offset)) {
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
       10:  430:		k = amatch(lin, i, pat, j + patsize(pat, j));
call    0 returned 100%
call    1 returned 100%
       10:  431:		if ((k >= 0))
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
        9:  432:		    done = true;
        -:  433:		else
        1:  434:		    i = i - 1;
        -:  435:	    }
        9:  436:	    offset = k;
        9:  437:	    done = true;
        -:  438:	} else {
      133:  439:	    result = omatch(lin, &offset, pat, j);
call    0 returned 100%
      133:  440:	    if ((!result)) {	
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
       51:  441:		offset = -1;
       51:  442:		done = true;
        -:  443:	    } else
       82:  444:		j = j + patsize(pat, j);
call    0 returned 100%
        -:  445:	}
      132:  446:     return offset;
        -:  447:}
        -:  448:
        -:  449:void
function putsub called 72 returned 100% blocks executed 100%
       72:  450:putsub(lin, s1, s2, sub,output,OL)
        -:  451:  char * lin;
        -:  452:  int	s1, s2;
        -:  453:  char * sub;
        -:  454:  char * output;
        -:  455:  int *OL;
        -:  456:{
        -:  457:    int	i;
        -:  458:    int		j;
        -:  459:
       72:  460:    i = 0;
      248:  461:    while ((sub[i] != ENDSTR)) {
branch  0 taken 59%
branch  1 taken 41% (fallthrough)
      104:  462:	if ((sub[i] == DITTO))
branch  0 taken 59% (fallthrough)
branch  1 taken 41%
      134:  463:	    for (j = s1; j < s2; j++) 
branch  0 taken 54%
branch  1 taken 46% (fallthrough)
        -:  464:	    {
        -:  465:		//fputc(lin[j],stdout);
       73:  466:                if((*OL)<2000){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       73:  467:                output[*OL]=lin[j];(*OL)++;
        -:  468:                }
        -:  469:	    }	
        -:  470:	else	
        -:  471:	{
        -:  472:	    //fputc(sub[i],stdout);
       43:  473:            if((*OL)<2000){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       43:  474:            output[*OL]=sub[i];(*OL)++;}
        -:  475:         }
      104:  476:	i = i + 1;
        -:  477:    }
       72:  478:}
        -:  479:
        -:  480:char *
function subline called 45 returned 100% blocks executed 94%
       45:  481:subline(lin, pat, sub)
        -:  482: char	*lin;
        -:  483: char   *pat;
        -:  484: char   *sub;
        -:  485:{	
        -:  486:	int	i, lastm, m;
        -:  487:        static char O[2000]="";
       45:  488:        int OL=0;
       45:  489:	lastm = -1;
       45:  490:	i = 0;
      212:  491:	while ((lin[i] != ENDSTR)) 
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -:  492:	{
      122:  493:	    m = amatch(lin, i, pat, 0);
call    0 returned 100%
      122:  494:	    if ((m >= 0) && (lastm != m)) {
branch  0 taken 59% (fallthrough)
branch  1 taken 41%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       72:  495:		putsub(lin, i, m, sub,O,&OL);
call    0 returned 100%
       72:  496:		lastm = m;
        -:  497:	    }
      182:  498:	    if ((m == -1) || (m == i)) {
branch  0 taken 59% (fallthrough)
branch  1 taken 41%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
        -:  499:		//fputc(lin[i],stdout);
       60:  500:                if(OL<2000){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       60:  501:                O[OL]=lin[i];OL++;}
       60:  502:		i = i + 1;
        -:  503:	    } else
       62:  504:		i = m;
        -:  505:	}
       45:  506:        if(OL<2000)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       45:  507:        O[OL]='\0';
        -:  508:      else
    #####:  509:        O[OL-1]='\0';
       45:  510:       return O;
        -:  511:}
        -:  512:
        -:  513: char *
function change called 45 returned 100% blocks executed 100%
       45:  514:change(pat, sub,line)
        -:  515:char *pat, *sub, *line;
        -:  516:{
       45:  517:  return subline(line, pat, sub);
call    0 returned 100%
        -:  518:}
function mainQ called 45 returned 100% blocks executed 100%
       45:  519:char *mainQ(char *argv1, char *argv2, char *argv3)
        -:  520:{
        -:  521:   string pat, sub;
        -:  522:   bool result;
       45:  523:   result = getpat(argv1, pat);
call    0 returned 100%
       45:  524:   result = getsub(argv2, sub);
call    0 returned 100%
       45:  525:   return change(pat,sub,argv3);
call    0 returned 100%
        -:  526:}
function main called 45 returned 100% blocks executed 100%
       45:  527:int main(int argc, char*argv[])
        -:  528:{
        -:  529:   //printf("'%s'\t'%s'\t'%s'END\n",argv[1],argv[2],argv[3]);
       45:  530:   fprintf(stdout,"%s\n",mainQ(argv[1],argv[2],argv[3]));
call    0 returned 100%
call    1 returned 100%
       45:  531:   return 0;
        -:  532:}
        -:  533:
        -:  534:void
function Caseerror called 0 returned 0% blocks executed 0%
    #####:  535:Caseerror(n)
        -:  536:	int	n;
        -:  537:{
    #####:  538:	(void)fprintf(stdout, "Missing case limb: line %d\n", n);
call    0 never executed
    #####:  539:	exit(4);
call    0 never executed
        -:  540:}
