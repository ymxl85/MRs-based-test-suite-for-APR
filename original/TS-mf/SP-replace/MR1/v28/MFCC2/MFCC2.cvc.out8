__tmpInt8  : BITVECTOR(8);
__tmpInt16  : BITVECTOR(16);
__tmpInt32  : BITVECTOR(32);
__tmpInt64  : BITVECTOR(64);
argv1_0xa05d010  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
argv2_0xa05d030  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
argv3_0xa071298  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
ASSERT( BVLT(BVPLUS(8,  0x9F,  argv2_0xa05d030[0x00000000]) ,0x1A)  );
ASSERT( (0x00 = argv2_0xa05d030[0x00000001] ) );
ASSERT( SBVLT(0x00,argv3_0xa071298[0x00000000])  );
ASSERT( SBVLT(0x00,argv3_0xa071298[0x00000001])  );
ASSERT( (0x00 = argv3_0xa071298[0x00000002] ) );
%----------------------------------------------------
%****************************************************
ASSERT( BVLT(BVPLUS(8,  0x9F,  argv2_0xa05d030[0x00000000]) ,0x1A)  );
ASSERT( (0x00 = argv2_0xa05d030[0x00000001] ) );
ASSERT( SBVLT(0x00,argv3_0xa071298[0x00000000])  );
ASSERT( SBVLT(0x00,argv3_0xa071298[0x00000001])  );
ASSERT( (0x00 = argv3_0xa071298[0x00000002] ) );
ASSERT( SBVLT(0x00,argv1_0xa05d010[0x00000000])  );
ASSERT( ( NOT( (0x25 = argv1_0xa05d010[0x00000000] ))) );
ASSERT( ( NOT( (0x24 = argv1_0xa05d010[0x00000000] ))) );
ASSERT( ( NOT( (0x5D = argv1_0xa05d010[0x00000000] ))) );
ASSERT( ( NOT( (0x5B = argv1_0xa05d010[0x00000000] ))) );
ASSERT( ( NOT( (0x5E = argv1_0xa05d010[0x00000000] ))) );
ASSERT( ( NOT( (0x2D = argv1_0xa05d010[0x00000000] ))) );
ASSERT( (0x00 = argv1_0xa05d010[0x00000002] ) );
%###################################################
ASSERT(NOT (( ( NOT( (0x3F = argv1_0xa05d010[0x00000000] ))) )));
%###################################################
ASSERT( ( NOT( (0x40 = argv1_0xa05d010[0x00000000] ))) );
ASSERT( (0x2A = argv1_0xa05d010[0x00000001] ) );
ASSERT( ( NOT( (argv3_0xa071298[0x00000000] = argv1_0xa05d010[0x00000000] ))) );
ASSERT( (argv1_0xa05d010[0x00000000] = argv3_0xa071298[0x00000001] ) );
ASSERT( ( NOT( (argv1_0xa05d010[0x00000000] = argv3_0xa071298[0x00000000] ))) );
QUERY( FALSE  );
