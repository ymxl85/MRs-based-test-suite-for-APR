__tmpInt8  : BITVECTOR(8);
__tmpInt16  : BITVECTOR(16);
__tmpInt32  : BITVECTOR(32);
__tmpInt64  : BITVECTOR(64);
argv1_0x9655a58  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
argv2_0x9ab7008  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
argv3_0x9b2f050  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1_0x9b013b0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2_0x9af59b8  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
ASSERT( (0x5B = argv1_0x9655a58[0x00000000]
) );
ASSERT( BVLT(BVPLUS(8, 
0x90, 
argv1_0x9655a58[0x00000001])
,0x0B)
 );
ASSERT( (0x2D = argv1_0x9655a58[0x00000002]
) );
ASSERT( (LET let_k_0 = argv1_0x9655a58[0x00000003] IN 
( NOT( (0x00000000 = BVXOR(0x00000001,IF((SBVLT(let_k_0,0x6F)
 OR (0x7A = let_k_0
)
))
THEN 0x00000001
ELSE 0x00000000
ENDIF)

))))  );
ASSERT( (0x5D = argv1_0x9655a58[0x00000004]
) );
ASSERT( (0x00 = argv1_0x9655a58[0x00000005]
) );
ASSERT( BVLT(BVPLUS(8, 
0xD0, 
argv2_0x9ab7008[0x00000000])
,0x0A)
 );
ASSERT( (0x00 = argv2_0x9ab7008[0x00000001]
) );
ASSERT( SBVLT(0x6E,argv3_0x9b2f050[0x00000000])
 );
ASSERT( (0x00 = argv3_0x9b2f050[0x00000001]
) );
ASSERT( ( NOT( SBVLE(argv1_0x9655a58[0x00000003],argv1_0x9655a58[0x00000001])
)) );
ASSERT( ( NOT( SBVLT(0x7A,argv1_0x9655a58[0x00000003])
)) );
ASSERT( (0x00000001 = BVSUB(32, 
BVSX(argv1_0x9655a58[0x00000003],32)
, 
BVSX(argv1_0x9655a58[0x00000001],32)
)

) );
ASSERT( ( NOT( (argv1_0x9655a58[0x00000003] = argv3_0x9b2f050[0x00000000]
))) );
ASSERT( ( NOT( (argv1_0x9655a58[0x00000001] = argv3_0x9b2f050[0x00000000]
))) );
%----------------------------------------------------
QUERY( FALSE  );
