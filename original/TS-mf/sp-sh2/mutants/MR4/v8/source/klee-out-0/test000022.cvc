__tmpInt8  : BITVECTOR(8);
__tmpInt16  : BITVECTOR(16);
__tmpInt32  : BITVECTOR(32);
__tmpInt64  : BITVECTOR(64);
argv1_0xaaead40  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1_0xa9c7628  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2_0xabb3bc8  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4_0xabdaca0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5_0xabbf7e8  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6_0xabfca90  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7_0xabff418  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8_0xabe8330  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9_0xac04c40  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr10_0xabcd720  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3_0xabee920  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr11_0xac10b48  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr12_0xac11538  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr13_0xabcf4d0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr14_0xabbb230  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr15_0xa9e5190  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr16_0xac133c8  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr18_0xac14ae8  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr17_0xabc8e68  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr19_0xac18438  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr21_0xac196d8  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr20_0xac14fa0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr22_0xac1a218  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr23_0xac1a758  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr24_0xac1d018  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr25_0xac21fc0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr26_0xabc9598  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr27_0xac19820  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr28_0xac24de8  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29_0xac28560  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr30_0xac257b0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr31_0xac2b6b8  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr32_0xac2efe0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr33_0xac30f68  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr35_0xac344b8  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr39_0xac52870  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr40_0xac536e8  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr42_0xac56e60  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr41_0xac56628  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr43_0xac59468  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr44_0xac5c300  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr46_0xac615c8  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr47_0xac632b0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr48_0xac66cf8  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr49_0xac690a8  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr52_0xac6cec0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr51_0xac6c088  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr50_0xac6a128  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr53_0xac6f638  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr54_0xac71b98  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr55_0xac73f10  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr56_0xac757f0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr57_0xac67440  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr58_0xac2b510  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr59_0xac76fe8  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr45_0xac60a98  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr34_0xac32928  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr37_0xac3b070  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr38_0xac48a78  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr36_0xac3a478  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr62_0xaccd770  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr60_0xac7b978  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr61_0xac95b58  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr64_0xabe0870  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr63_0xacd4258  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr70_0xacec508  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr65_0xabcb950  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr66_0xacf32d8  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr68_0xacee878  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr69_0xaced108  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr67_0xabd80d0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr71_0xacdc170  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr72_0xace4d70  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr73_0xac9ecd0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr79_0xace0958  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr74_0xabbd538  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr76_0xacc4a88  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr75_0xacec8d0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr77_0xac9d040  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr78_0xad28f98  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr80_0xad3ad40  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr82_0xace51c0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr81_0xacd3ed8  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr83_0xac9bfd8  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr84_0xad5e8e0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr85_0xac02a30  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
ASSERT( BVLT(BVPLUS(8, 
0xD0, 
argv1_0xaaead40[0x00000000])
,0x03)
 );
ASSERT( (0x20 = argv1_0xaaead40[0x00000001]
) );
ASSERT( BVLT(BVPLUS(8, 
0xD0, 
argv1_0xaaead40[0x00000002])
,0x03)
 );
ASSERT( (0x20 = argv1_0xaaead40[0x00000003]
) );
ASSERT( BVLT(BVPLUS(8, 
0xD0, 
argv1_0xaaead40[0x00000004])
,0x03)
 );
ASSERT( (0x0A = argv1_0xaaead40[0x00000005]
) );
ASSERT( (0x31 = argv1_0xaaead40[0x00000006]
) );
ASSERT( (0x20 = argv1_0xaaead40[0x00000007]
) );
ASSERT( (0x31 = argv1_0xaaead40[0x00000008]
) );
ASSERT( (0x0A = argv1_0xaaead40[0x00000009]
) );
ASSERT( (0x37 = argv1_0xaaead40[0x0000000A]
) );
ASSERT( (0x0A = argv1_0xaaead40[0x0000000B]
) );
ASSERT( (0x00 = argv1_0xaaead40[0x0000000C]
) );
ASSERT( ( NOT( (0x2B = argv1_0xaaead40[0x00000000]
))) );
ASSERT( ( NOT( (0x2D = argv1_0xaaead40[0x00000000]
))) );
ASSERT( ( NOT( (0x2B = argv1_0xaaead40[0x00000002]
))) );
ASSERT( ( NOT( (0x2D = argv1_0xaaead40[0x00000002]
))) );
ASSERT( ( NOT( (0x2B = argv1_0xaaead40[0x00000004]
))) );
ASSERT( ( NOT( (0x2D = argv1_0xaaead40[0x00000004]
))) );
ASSERT( SBVLT(0x00000000,(0x000000 @ BVPLUS(8, 
0xD0, 
argv1_0xaaead40[0x00000000])

))
 );
ASSERT( SBVLT(0x00000000,BVPLUS(32, 
0xFFFFFFFF, 
(0x000000 @ BVPLUS(8, 
0xD0, 
argv1_0xaaead40[0x00000000])

))
)
 );
ASSERT( SBVLT(0x00000000,(0x000000 @ BVPLUS(8, 
0xD0, 
argv1_0xaaead40[0x00000002])

))
 );
ASSERT( SBVLT(0x00000000,BVPLUS(32, 
0xFFFFFFFF, 
(0x000000 @ BVPLUS(8, 
0xD0, 
argv1_0xaaead40[0x00000002])

))
)
 );
ASSERT( ( NOT( SBVLT(0x00000000,(0x000000 @ BVPLUS(8, 
0xD0, 
argv1_0xaaead40[0x00000004])

))
)) );
ASSERT( (LET let_k_0 = ((0x000000 @ BVPLUS(8, 
0xD0, 
argv1_0xaaead40[0x00000008])

)[28:0] @ 0b000
),
let_k_1 = ((((((((((((((((((((((((((((((((((((const_arr31_0xac2b6b8 WITH [0x00000000] := 0x00)
 WITH [0x00000001] := 0x00)
 WITH [0x00000002] := 0x00)
 WITH [0x00000003] := 0x00)
 WITH [0x00000004] := 0x00)
 WITH [0x00000005] := 0x00)
 WITH [0x00000006] := 0x00)
 WITH [0x00000007] := 0x00)
 WITH [0x00000008] := 0x00)
 WITH [0x00000009] := 0x00)
 WITH [0x0000000A] := 0x00)
 WITH [0x0000000B] := 0x00)
 WITH [0x0000000C] := 0x00)
 WITH [0x0000000D] := 0x00)
 WITH [0x0000000E] := 0x00)
 WITH [0x0000000F] := 0x00)
 WITH [0x00000010] := 0x02)
 WITH [0x00000011] := 0x00)
 WITH [0x00000012] := 0x00)
 WITH [0x00000013] := 0x00)
 WITH [0x00000014] := 0x08)
 WITH [0x00000015] := 0xA2)
 WITH [0x00000016] := 0x9C)
 WITH [0x00000017] := 0x0A)
 WITH [0x00000018] := 0x01)
 WITH [0x00000019] := 0x00)
 WITH [0x0000001A] := 0x00)
 WITH [0x0000001B] := 0x00)
 WITH [0x0000001C] := 0xC8)
 WITH [0x0000001D] := 0x18)
 WITH [0x0000001E] := 0xBC)
 WITH [0x0000001F] := 0x0A)
 WITH [BVPLUS(32, 
0x00000004, 
let_k_0)
] := 0xE8)
 WITH [BVPLUS(32, 
0x00000005, 
let_k_0)
] := 0xE2)
 WITH [BVPLUS(32, 
0x00000006, 
let_k_0)
] := 0xC1)
 WITH [BVPLUS(32, 
0x00000007, 
let_k_0)
] := 0x0A)
,
let_k_2 = BVPLUS(32, 
0x00000001, 
let_k_0)
,
let_k_3 = BVPLUS(32, 
0x00000001, 
(let_k_1[BVPLUS(32, 
0x00000003, 
let_k_0)
] @ (let_k_1[BVPLUS(32, 
0x00000002, 
let_k_0)
] @ (let_k_1[let_k_2] @ let_k_1[let_k_0]
)
)
))
,
let_k_4 = BVPLUS(32, 
0x00000002, 
let_k_0)
,
let_k_5 = BVPLUS(32, 
0x00000003, 
let_k_0)
,
let_k_6 = ((((let_k_1 WITH [let_k_0] := let_k_3[7:0])
 WITH [let_k_2] := let_k_3[15:8])
 WITH [let_k_4] := let_k_3[23:16])
 WITH [let_k_5] := let_k_3[31:24])
 IN 
(0x00000001 = (let_k_6[0x0000001B] @ (let_k_6[0x0000001A] @ (let_k_6[0x00000019] @ let_k_6[0x00000018]
)
)
)
))  );
ASSERT( (LET let_k_0 = ((0x000000 @ BVPLUS(8, 
0xD0, 
argv1_0xaaead40[0x00000008])

)[28:0] @ 0b000
),
let_k_1 = ((((((((((((((((((((((((((((((((((((const_arr31_0xac2b6b8 WITH [0x00000000] := 0x00)
 WITH [0x00000001] := 0x00)
 WITH [0x00000002] := 0x00)
 WITH [0x00000003] := 0x00)
 WITH [0x00000004] := 0x00)
 WITH [0x00000005] := 0x00)
 WITH [0x00000006] := 0x00)
 WITH [0x00000007] := 0x00)
 WITH [0x00000008] := 0x00)
 WITH [0x00000009] := 0x00)
 WITH [0x0000000A] := 0x00)
 WITH [0x0000000B] := 0x00)
 WITH [0x0000000C] := 0x00)
 WITH [0x0000000D] := 0x00)
 WITH [0x0000000E] := 0x00)
 WITH [0x0000000F] := 0x00)
 WITH [0x00000010] := 0x02)
 WITH [0x00000011] := 0x00)
 WITH [0x00000012] := 0x00)
 WITH [0x00000013] := 0x00)
 WITH [0x00000014] := 0x08)
 WITH [0x00000015] := 0xA2)
 WITH [0x00000016] := 0x9C)
 WITH [0x00000017] := 0x0A)
 WITH [0x00000018] := 0x01)
 WITH [0x00000019] := 0x00)
 WITH [0x0000001A] := 0x00)
 WITH [0x0000001B] := 0x00)
 WITH [0x0000001C] := 0xC8)
 WITH [0x0000001D] := 0x18)
 WITH [0x0000001E] := 0xBC)
 WITH [0x0000001F] := 0x0A)
 WITH [BVPLUS(32, 
0x00000004, 
let_k_0)
] := 0xE8)
 WITH [BVPLUS(32, 
0x00000005, 
let_k_0)
] := 0xE2)
 WITH [BVPLUS(32, 
0x00000006, 
let_k_0)
] := 0xC1)
 WITH [BVPLUS(32, 
0x00000007, 
let_k_0)
] := 0x0A)
,
let_k_2 = BVPLUS(32, 
0x00000001, 
let_k_0)
,
let_k_3 = BVPLUS(32, 
0x00000001, 
(let_k_1[BVPLUS(32, 
0x00000003, 
let_k_0)
] @ (let_k_1[BVPLUS(32, 
0x00000002, 
let_k_0)
] @ (let_k_1[let_k_2] @ let_k_1[let_k_0]
)
)
))
,
let_k_4 = BVPLUS(32, 
0x00000002, 
let_k_0)
,
let_k_5 = BVPLUS(32, 
0x00000003, 
let_k_0)
,
let_k_6 = ((((let_k_1 WITH [let_k_0] := let_k_3[7:0])
 WITH [let_k_2] := let_k_3[15:8])
 WITH [let_k_4] := let_k_3[23:16])
 WITH [let_k_5] := let_k_3[31:24])
 IN 
(0x00000002 = (let_k_6[0x00000013] @ (let_k_6[0x00000012] @ (let_k_6[0x00000011] @ let_k_6[0x00000010]
)
)
)
))  );
ASSERT( (LET let_k_0 = ((0x000000 @ BVPLUS(8, 
0xD0, 
argv1_0xaaead40[0x00000008])

)[28:0] @ 0b000
),
let_k_1 = ((((((((((((((((((((((((((((((((((((const_arr31_0xac2b6b8 WITH [0x00000000] := 0x00)
 WITH [0x00000001] := 0x00)
 WITH [0x00000002] := 0x00)
 WITH [0x00000003] := 0x00)
 WITH [0x00000004] := 0x00)
 WITH [0x00000005] := 0x00)
 WITH [0x00000006] := 0x00)
 WITH [0x00000007] := 0x00)
 WITH [0x00000008] := 0x00)
 WITH [0x00000009] := 0x00)
 WITH [0x0000000A] := 0x00)
 WITH [0x0000000B] := 0x00)
 WITH [0x0000000C] := 0x00)
 WITH [0x0000000D] := 0x00)
 WITH [0x0000000E] := 0x00)
 WITH [0x0000000F] := 0x00)
 WITH [0x00000010] := 0x02)
 WITH [0x00000011] := 0x00)
 WITH [0x00000012] := 0x00)
 WITH [0x00000013] := 0x00)
 WITH [0x00000014] := 0x08)
 WITH [0x00000015] := 0xA2)
 WITH [0x00000016] := 0x9C)
 WITH [0x00000017] := 0x0A)
 WITH [0x00000018] := 0x01)
 WITH [0x00000019] := 0x00)
 WITH [0x0000001A] := 0x00)
 WITH [0x0000001B] := 0x00)
 WITH [0x0000001C] := 0xC8)
 WITH [0x0000001D] := 0x18)
 WITH [0x0000001E] := 0xBC)
 WITH [0x0000001F] := 0x0A)
 WITH [BVPLUS(32, 
0x00000004, 
let_k_0)
] := 0xE8)
 WITH [BVPLUS(32, 
0x00000005, 
let_k_0)
] := 0xE2)
 WITH [BVPLUS(32, 
0x00000006, 
let_k_0)
] := 0xC1)
 WITH [BVPLUS(32, 
0x00000007, 
let_k_0)
] := 0x0A)
,
let_k_2 = BVPLUS(32, 
0x00000001, 
let_k_0)
,
let_k_3 = BVPLUS(32, 
0x00000001, 
(let_k_1[BVPLUS(32, 
0x00000003, 
let_k_0)
] @ (let_k_1[BVPLUS(32, 
0x00000002, 
let_k_0)
] @ (let_k_1[let_k_2] @ let_k_1[let_k_0]
)
)
))
,
let_k_4 = BVPLUS(32, 
0x00000002, 
let_k_0)
,
let_k_5 = BVPLUS(32, 
0x00000003, 
let_k_0)
,
let_k_6 = ((((let_k_1 WITH [let_k_0] := let_k_3[7:0])
 WITH [let_k_2] := let_k_3[15:8])
 WITH [let_k_4] := let_k_3[23:16])
 WITH [let_k_5] := let_k_3[31:24])
 IN 
(0x00000001 = (let_k_6[0x0000000B] @ (let_k_6[0x0000000A] @ (let_k_6[0x00000009] @ let_k_6[0x00000008]
)
)
)
))  );
%----------------------------------------------------
QUERY( FALSE  );
